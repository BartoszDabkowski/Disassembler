00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 6/9/2015 11:37:33 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68k Disassembler
00000000                             3  * Written by : Bartosz Dabkowski and Bethel Heo
00000000                             4  * Date       : 6/7/2015
00000000                             5  * Description: CSS 422 - Final Project
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  *-------------------------------------------------------------------
00000000                             9  * Constants
00000000                            10  *-------------------------------------------------------------------
00000000                            11  
00000000                            12  *A1
00000000                            13  *A2 
00000000                            14  *A3 VALID BUFFER
00000000                            15  *A4
00000000                            16  *A5 STARTING ADDRESS
00000000                            17  *A6 ENDING ADDRESS
00000000                            18  *A7
00000000                            19  
00000000                            20  *D1
00000000                            21  *D2
00000000                            22  *D3 
00000000                            23  *D4
00000000                            24  *D5 START ADDRESS
00000000                            25  *D6 END ADDRESS
00000000                            26  *D7 Max number of lines
00000000                            27  
00000000                            28  
00000000  =00800000                 29  VALID_BUFFER        EQU     $00800000               valid buffer
00000000  =0000000D                 30  CR                  EQU     $0D
00000000  =0000000A                 31  LF                  EQU     $0A
00000000                            32  
00000000                            33  *-------------------------------------------------------------------
00000000                            34  * Bitmasks
00000000                            35  *-------------------------------------------------------------------
00000000                            36  
00000000  =0000F000                 37  OP_AND_BITMASK      EQU %1111000000000000   value to and with to check op code
00000000  =00000000                 38  OP_0000_BITMASK     EQU %0000000000000000   bitmask for 0000
00000000  =00001000                 39  OP_0001_BITMASK     EQU %0001000000000000   bitmask for 0001
00000000  =00002000                 40  OP_0010_BITMASK     EQU %0010000000000000   bitmask for 0010
00000000  =00003000                 41  OP_0011_BITMASK     EQU %0011000000000000   bitmask for 0011
00000000  =00004000                 42  OP_0100_BITMASK     EQU %0100000000000000   bitmask for 0100
00000000  =00005000                 43  OP_0101_BITMASK     EQU %0101000000000000   bitmask for 0101
00000000  =00006000                 44  OP_0110_BITMASK     EQU %0110000000000000   bitmask for 0110
00000000  =00008000                 45  OP_1000_BITMASK     EQU %1000000000000000   bitmask for 1000
00000000  =00009000                 46  OP_1001_BITMASK     EQU %1001000000000000   bitmask for 1001
00000000  =0000B000                 47  OP_1011_BITMASK     EQU %1011000000000000   bitmask for 1011
00000000  =0000C000                 48  OP_1100_BITMASK     EQU %1100000000000000   bitmask for 1100
00000000  =0000D000                 49  OP_1101_BITMASK     EQU %1101000000000000   bitmask for 1101
00000000  =0000E000                 50  OP_1110_BITMASK     EQU %1110000000000000   bitmask for 1110
00000000                            51  
00000000  =00000E00                 52  D_REG_BITMASK       EQU %0000111000000000   bitmask for destination reg
00000000  =000001C0                 53  D_MODE_BITMASK      EQU %0000000111000000   bitmask for destination mode
00000000  =00000038                 54  S_MODE_BITMASK      EQU %0000000000111000   bitmask for source mode
00000000  =00000007                 55  S_REG_BITMASK       EQU %0000000000000111   bitmask for source reg
00000000                            56  
00000000  =00008000                 57  BIT_15_BITMASK      EQU %1000000000000000   bitmask for bit 15
00000000  =00004000                 58  BIT_14_BITMASK      EQU %0100000000000000   bitmask for bit 14
00000000  =00002000                 59  BIT_13_BITMASK      EQU %0010000000000000   bitmask for bit 13
00000000  =00001000                 60  BIT_12_BITMASK      EQU %0001000000000000   bitmask for bit 12
00000000  =00000800                 61  BIT_11_BITMASK      EQU %0000100000000000   bitmask for bit 11
00000000  =00000400                 62  BIT_10_BITMASK      EQU %0000010000000000   bitmask for bit 10
00000000  =00000200                 63  BIT_09_BITMASK      EQU %0000001000000000   bitmask for bit 09
00000000  =00000100                 64  BIT_08_BITMASK      EQU %0000000100000000   bitmask for bit 08
00000000  =00000080                 65  BIT_07_BITMASK      EQU %0000000010000000   bitmask for bit 07
00000000  =00000040                 66  BIT_06_BITMASK      EQU %0000000001000000   bitmask for bit 06
00000000  =00000020                 67  BIT_05_BITMASK      EQU %0000000000100000   bitmask for bit 05
00000000  =00000010                 68  BIT_04_BITMASK      EQU %0000000000010000   bitmask for bit 04
00000000  =00000008                 69  BIT_03_BITMASK      EQU %0000000000001000   bitmask for bit 03
00000000  =00000004                 70  BIT_02_BITMASK      EQU %0000000000000100   bitmask for bit 02
00000000  =00000002                 71  BIT_01_BITMASK      EQU %0000000000000010   bitmask for bit 01
00000000  =00000001                 72  BIT_00_BITMASK      EQU %0000000000000001   bitmask for bit 00
00000000                            73  
00000000  =00000E00                 74  BIT_11_TO_09        EQU %0000111000000000   bitmask for bits 11-09
00000000  =00000F00                 75  BIT_11_TO_08        EQU %0000111100000000   bitmask for bits 11-08
00000000  =00000FC0                 76  BIT_11_TO_06        EQU %0000111111000000   bitmask for bits 11-06
00000000  =000001C0                 77  BIT_08_TO_06        EQU %0000000111000000   bitmask for bits 08-06 
00000000  =000000FF                 78  BIT_07_TO_00        EQU %0000000011111111   bitmask for bits 07-00
00000000  =000000C0                 79  BIT_07_TO_06        EQU %0000000011000000   bitmask for bits 07-00
00000000  =00000018                 80  BIT_04_TO_03        EQU %0000000000011000   bitmask for bits 04-03
00000000  =000000C0                 81  BIT_07_TO_06        EQU %0000000011000000   bitmask for bits 07-06
00000000  =0000003F                 82  BIT_05_TO_00        EQU %0000000000111111   bitmask for bits 05-00
00000000  =00000038                 83  BIT_05_TO_03        EQU %0000000000111000   bitmask for bits 05-03
00000000                            84          
00000000                            85          
00001000                            86          ORG    $1000
00001000                            87  START:
00001000  47F9 00800000             88          LEA     VALID_BUFFER,A3     load valid buffer into A3
00001006                            89  
00001006                            90  *******************************************************************
00001006                            91  *                       GET_ADDRESSES                             *
00001006                            92  *******************************************************************
00001006                            93  *   Gets valid starting and end addresses from user
00001006                            94  *   Address must be 8 bits            ORG    $1000*   POST:  D4 will store starting address
00001006                            95  *          A4 will have starting address set to user input
00001006                            96  *          D5 will store ending address
00001006                            97  *          A5 will have ending address set to user input
00001006                            98  *------------------------------------------------------------------
00001006                            99  GET_ADDRESSES  
00001006                           100  *-------Print welcome message-------------------
00001006  43F9 00002537            101          LEA     WELCOME,A1     
0000100C  103C 000E                102          MOVE.B  #14,D0
00001010  4E4F                     103          TRAP    #15
00001012                           104          
00001012                           105  *-------Print starting address input message----    
00001012  43F9 00002560            106          LEA     START_ADDRESS,A1  
00001018  103C 000E                107          MOVE.B  #14,D0
0000101C  4E4F                     108          TRAP    #15
0000101E                           109  *-----------------------------------------------
0000101E                           110          
0000101E  227C 00000000            111          MOVEA.L #$00000000,A1       change A1 address to $0000 0000
00001024  22BC 00000000            112          MOVE.L  #$00000000,(A1)     clear A1
0000102A                           113          
0000102A                           114  *-------Get user input (STRING) for starting address
0000102A                           115  
0000102A  103C 0002                116          MOVE.B  #2,D0                   
0000102E  4E4F                     117          TRAP    #15
00001030                           118          
00001030  4EB9 000010A8            119          JSR     CHECK_VALID_ADDRESS
00001036                           120             
00001036  2A38 0000                121          MOVE.L  ($00000000),D5      move 4 most significant bytes to D5 (contents of A1)
0000103A  2405                     122          MOVE.L  D5,D2               copy D6 to D2
0000103C  2A38 0004                123          MOVE.L  ($00000004),D5      move 4 least significant bytes to D5 (contents of A1)
00001040  2605                     124          MOVE.L  D5,D3               copy D6 to D3   
00001042  4EB9 000010FE            125          JSR     CONVERT_DEC_TO_ASCII 
00001048                           126          
00001048  2A42                     127          MOVE.L  D2,A5               assign address to A5
0000104A  2A02                     128          MOVE.L  D2,D5               assign address to D5
0000104C                           129          
0000104C                           130  *-------Print ending address input message------   
0000104C  43F9 00002581            131          LEA     END_ADDRESS,A1  
00001052  103C 000E                132          MOVE.B  #14,D0
00001056  4E4F                     133          TRAP    #15
00001058                           134          
00001058                           135  *-----------------------------------------------
00001058                           136  
00001058  227C 00000000            137          MOVEA.L #$00000000,A1       change A1 address to $0000 0000
0000105E  22BC 00000000            138          MOVE.L  #$00000000,(A1)     clear A1
00001064                           139          
00001064                           140  *-------Get user input (STRING) for ending address
00001064  103C 0002                141          MOVE.B  #2,D0                   
00001068  4E4F                     142          TRAP    #15
0000106A                           143          
0000106A  4EB9 000010A8            144          JSR     CHECK_VALID_ADDRESS
00001070                           145          
00001070  2C38 0000                146          MOVE.L  ($00000000),D6      move 4 most significant bytes to D6 (contents of A1)
00001074  2406                     147          MOVE.L  D6,D2               copy D7 to D2
00001076  2C38 0004                148          MOVE.L  ($00000004),D6      move 4 least significant bytes to D6 (contents of A1)
0000107A  2606                     149          MOVE.L  D6,D3               copy D7 to D2   
0000107C  4EB9 000010FE            150          JSR     CONVERT_DEC_TO_ASCII 
00001082                           151          
00001082  2C42                     152          MOVE.L  D2,A6               assign address to A6
00001084  2C02                     153          MOVE.L  D2,D6               assign address to D6
00001086                           154  
00001086                           155  *-------Check to see if start address is smaller than end address    
00001086  BC85                     156          CMP.L   D5,D6
00001088  6D00 0064                157          BLT     INVALID_ADDRESS                              
0000108C                           158  
0000108C                           159  *-------Clear registers
0000108C  7000                     160          MOVE.L  #$00000000,D0
0000108E  7200                     161          MOVE.L  #$00000000,D1
00001090  7400                     162          MOVE.L  #$00000000,D2
00001092  7600                     163          MOVE.L  #$00000000,D3
00001094                           164          
00001094                           165  *-------Load Max lines to print (25) and start the simulation
00001094  43F9 000025E3            166          LEA     STARTINGDIS,A1      print starting message
0000109A  103C 000E                167          MOVE.B  #14,D0
0000109E  4E4F                     168          TRAP    #15
000010A0                           169          
000010A0  1E3C 0000                170          MOVE.B  #$00,D7             max lines
000010A4  6000 010C                171          BRA     START_DISASSEMBLER  start dissassmbler
000010A8                           172  
000010A8                           173        
000010A8                           174   
000010A8                           175  *************************************************
000010A8                           176  *           CHECK_VALID_ADDRESS                 *
000010A8                           177  *************************************************
000010A8                           178  * checks if the address stored in A1 is a valid *
000010A8                           179  * 8 byte hex value                              *
000010A8                           180  *************************************************
000010A8                           181  CHECK_VALID_ADDRESS
000010A8                           182                                      *D2 keeps track of loop
000010A8  7400                     183          MOVE.L  #0,D2               zeros out D2
000010AA                           184          
000010AA  B43C 0008                185  LOOP_1  CMP.B   #8,D2               checks loop (8 loops total)
000010AE  6C00 000E                186          BGE     END_LOOP_1
000010B2  1219                     187          MOVE.B  (A1)+,D1            move contents of A1 to D1 and increment pointer
000010B4  4EB9 000010CA            188          JSR     CHECK_IF_HEX        check if inputed is a valid hex
000010BA  5202                     189          ADDI.B  #1,D2               increment D2
000010BC  60EC                     190          BRA     LOOP_1   
000010BE                           191  
000010BE                           192  END_LOOP_1        
000010BE  1211                     193          MOVE.B  (A1),D1             check if 9th byte is NULL
000010C0  B23C 0000                194          CMP.B   #$00,D1             so that lenght is a long
000010C4  6600 0028                195          BNE     INVALID_ADDRESS
000010C8  4E75                     196          RTS                         address is valid
000010CA                           197       
000010CA                           198  *************************************************
000010CA                           199  *           CHECK_IF_HEX                        *
000010CA                           200  *************************************************
000010CA                           201  * checks if the byte is a valid hex number      *   
000010CA                           202  * 0-9 and A-F                                   *
000010CA                           203  *************************************************   
000010CA                           204  CHECK_IF_HEX
000010CA                           205  
000010CA  B23C 0030                206          CMP.B   #$30,D1             check if number
000010CE  6D00 000C                207          BLT     CHECK_IF_HEX_LETTER check if letter
000010D2                           208          
000010D2  B23C 0039                209          CMP.B   #$39,D1             check if number
000010D6  6E00 0004                210          BGT     CHECK_IF_HEX_LETTER check if letter
000010DA                           211          
000010DA  4E75                     212          RTS                         hex is valid
000010DC                           213  
000010DC                           214  *************************************************
000010DC                           215  *           CHECK_IF_HEX_LETTER                 *
000010DC                           216  *************************************************
000010DC                           217  * checks if the byte is between A and F         *
000010DC                           218  *************************************************        
000010DC                           219  CHECK_IF_HEX_LETTER
000010DC                           220  
000010DC  B23C 0041                221          CMP.B   #$41,D1            less than A
000010E0  6D00 000C                222          BLT     INVALID_ADDRESS
000010E4                           223      
000010E4  B23C 0046                224          CMP.B   #$46,D1            greater than F
000010E8  6E00 0004                225          BGT     INVALID_ADDRESS
000010EC                           226  
000010EC  4E75                     227          RTS                        if it passes all tests then it is a valid hex
000010EE                           228    
000010EE                           229  *************************************************
000010EE                           230  *           INVALID_ADDRESS                     *
000010EE                           231  *************************************************
000010EE                           232  * outputs invalid address message and returns   * 
000010EE                           233  * back to address input                         *
000010EE                           234  *************************************************       
000010EE                           235  INVALID_ADDRESS
000010EE                           236  
000010EE                           237  *-------Print invalid address message------------ 
000010EE  43F9 000025A0            238          LEA     INVALIDA, A1
000010F4  103C 000E                239          MOVE.B  #14,D0
000010F8  4E4F                     240          TRAP    #15
000010FA  6000 FF0A                241          BRA     GET_ADDRESSES       invalid address start over
000010FE                           242          
000010FE                           243          
000010FE                           244  *******************************************************************
000010FE                           245  *                       CONVERT_DEC_TO_ASCII                      *
000010FE                           246  *******************************************************************
000010FE                           247  *   PRE:   D2 & D3 must store decimals that are to be converted to 
000010FE                           248  *          ascii 4 most significant digits      ex: FFFF....
000010FE                           249  *          D3 must store last 4                 ex: ....FFFF
000010FE                           250  *   POST:  D2 will store the converted value
000010FE                           251  *               ex: D2 = 41424344  -> D2 = 0000ABCD
000010FE                           252  *                   D3 = 31323334  -> D3 = 12340000
000010FE                           253  *                   D2 = D2 + D3
000010FE                           254  *                   D2 = 1234ABCD
000010FE                           255  *------------------------------------------------------------------
000010FE                           256  CONVERT_DEC_TO_ASCII
000010FE                           257          
000010FE  2202                     258          MOVE.L  D2,D1               moves D2 into D1
00001100  E089                     259          LSR.L   #8,D1               isolate MSD
00001102  E089                     260          LSR.L   #8,D1
00001104  E089                     261          LSR.L   #8,D1
00001106  4EB9 0000119A            262          JSR     NUMBER_OR_LETTER    check if letter or number
0000110C                           263          
0000110C  2202                     264          MOVE.L  D2,D1               make a copy of starting to D1
0000110E  E089                     265          LSR.L   #8,D1               isolate the next digits
00001110  E089                     266          LSR.L   #8,D1
00001112  4EB9 0000119A            267          JSR     NUMBER_OR_LETTER    check if letter or number
00001118                           268          
00001118  2202                     269          MOVE.L  D2,D1               make a copy of starting to D1
0000111A  E089                     270          LSR.L   #8,D1               isolate the next digits
0000111C  4EB9 0000119A            271          JSR     NUMBER_OR_LETTER    check if letter or number
00001122                           272          
00001122  2202                     273          MOVE.L  D2,D1               make a copy of starting to D1
00001124  4EB9 0000119A            274          JSR     NUMBER_OR_LETTER    check if letter or number
0000112A                           275          
0000112A                           276  *-------------------------------------------------------------------
0000112A                           277  * Creates a long of the address and then points A6 to that value
0000112A                           278  *-------------------------------------------------------------------        
0000112A                           279  
0000112A  247C 00000000            280          MOVE.L  #$00000000,A2   return to beginning of A6
00001130  121A                     281          MOVE.B  (A2)+,D1        move the byte into D1
00001132                           282          
00001132  E989                     283          LSL.L   #4,D1           shifts the nibble left
00001134  D21A                     284          ADD.B   (A2)+,D1        adds the next byte
00001136                           285          
00001136  E989                     286          LSL.L   #4,D1           shifts the nibble left
00001138  D21A                     287          ADD.B   (A2)+,D1        adds the next byte
0000113A                           288          
0000113A  E989                     289          LSL.L   #4,D1           shifts the nibble left
0000113C  D212                     290          ADD.B   (A2),D1         adds the next byte
0000113E                           291          
0000113E  247C 00000000            292          MOVE.L  #$00000000,A2   return to beginning of A6
00001144                           293          
00001144  E189                     294          LSL.L   #8,D1           adds in zeros so we can swap                
00001146  E189                     295          LSL.L   #8,D1
00001148                           296          
00001148  2401                     297          MOVE.L  D1,D2
0000114A                           298          
0000114A                           299  *---------------------------------------------------------------------
0000114A                           300  
0000114A  2203                     301          MOVE.L  D3,D1               moves D2 into D1
0000114C  E089                     302          LSR.L   #8,D1               isolate MSD
0000114E  E089                     303          LSR.L   #8,D1
00001150  E089                     304          LSR.L   #8,D1
00001152  4EB9 0000119A            305          JSR     NUMBER_OR_LETTER    check if letter or number
00001158                           306          
00001158  2203                     307          MOVE.L  D3,D1               make a copy of starting to D1
0000115A  E089                     308          LSR.L   #8,D1               isolate the next digits
0000115C  E089                     309          LSR.L   #8,D1
0000115E  4EB9 0000119A            310          JSR     NUMBER_OR_LETTER    check if letter or number
00001164                           311          
00001164  2203                     312          MOVE.L  D3,D1               make a copy of starting to D1
00001166  E089                     313          LSR.L   #8,D1               isolate the next digits
00001168  4EB9 0000119A            314          JSR     NUMBER_OR_LETTER    check if letter or number
0000116E                           315          
0000116E  2203                     316          MOVE.L  D3,D1               make a copy of starting to D1
00001170  4EB9 0000119A            317          JSR     NUMBER_OR_LETTER    check if letter or number
00001176                           318          
00001176                           319  *-------------------------------------------------------------------
00001176                           320  * Creates a long of the address and then points A6 to that value
00001176                           321  *-------------------------------------------------------------------        
00001176                           322  
00001176  247C 00000000            323          MOVE.L  #$00000000,A2   return to beginning of A6
0000117C  121A                     324          MOVE.B  (A2)+,D1        move the byte into D1
0000117E                           325          
0000117E  E989                     326          LSL.L   #4,D1           shifts the nibble left
00001180  D21A                     327          ADD.B   (A2)+,D1        adds the next byte
00001182                           328          
00001182  E989                     329          LSL.L   #4,D1           shifts the nibble left
00001184  D21A                     330          ADD.B   (A2)+,D1        adds the next byte
00001186                           331          
00001186  E989                     332          LSL.L   #4,D1           shifts the nibble left
00001188  D212                     333          ADD.B   (A2),D1         adds the next byte
0000118A                           334          
0000118A  247C 00000000            335          MOVE.L  #$00000000,A2   return to beginning of A6
00001190                           336          
00001190  E189                     337          LSL.L   #8,D1           adds in zeros so we can swap                
00001192  E189                     338          LSL.L   #8,D1
00001194                           339          
00001194  4841                     340          SWAP    D1
00001196                           341          
00001196  D441                     342          ADD.W   D1,D2
00001198                           343  
00001198  4E75                     344          RTS
0000119A                           345                  
0000119A                           346  NUMBER_OR_LETTER
0000119A  B23C 0041                347          CMP.B   #$41,D1         less than 41 hex is a number
0000119E  6D00 000A                348          BLT     CONVERT_NUMBER  branch for number
000011A2                           349          
000011A2  0401 0037                350          SUBI.B  #$37,D1         no branch is letter. convert to hex
000011A6  14C1                     351          MOVE.B  D1,(A2)+        store in A6 and increment
000011A8  4E75                     352          RTS
000011AA                           353          
000011AA                           354  CONVERT_NUMBER
000011AA  0401 0030                355          SUBI.B  #$30,D1         convert to hex for number
000011AE  14C1                     356          MOVE.B  D1,(A2)+        store in A6 and increment
000011B0  4E75                     357          RTS        
000011B2                           358  
000011B2                           359  
000011B2                           360  *******************************************************************
000011B2                           361  *                       START_DISASSEMBLER                        *
000011B2                           362  *******************************************************************
000011B2                           363  *   PRE:    A2 
000011B2                           364  *           A3 VALID BUFFER
000011B2                           365  *           A4 INVALID BUFFER
000011B2                           366  *           A5 CURRENT ADDRESS
000011B2                           367  *           A6 ENDING ADDRESS
000011B2                           368  
000011B2                           369  *           D2 DATA TO MINIPULATE
000011B2                           370  *           D3 ORIGINAL CODE
000011B2                           371  *           D4 
000011B2                           372  *           D5 
000011B2                           373  *           D6
000011B2                           374  *           D7 MAX LINES TO PRINT (25)
000011B2                           375  *------------------------------------------------------------------
000011B2                           376  START_DISASSEMBLER
000011B2  5207                     377          ADDI.B  #1,D7               increment max lines
000011B4  BE3C 0019                378          CMP.B   #$19,D7             compare it to 25 lines
000011B8  6E00 0024                379          BGT     FULL_SCREEN         screen is full
000011BC                           380          
000011BC  BDCD                     381          CMPA.L  A5,A6               compare starting address to ending
000011BE  6D00 132C                382          BLT     END_DISASSEMBLER    reached the end
000011C2                           383          
000011C2  4EB9 00001216            384          JSR     BUFFER_ADDRESS      buffers the address
000011C8  4EB9 0000248E            385          JSR     PRINT_VALID_BUFFER  prints the address
000011CE                           386          
000011CE  43F9 0000264F            387          LEA     TAB,A1              print tab
000011D4  103C 000E                388          MOVE.B  #14,D0
000011D8  4E4F                     389          TRAP    #15
000011DA                           390          
000011DA  6000 011C                391          BRA     PRINT_INSTRUCTION   buffers and prints instruction
000011DE                           392  
000011DE                           393  *******************************************************************
000011DE                           394  *                         FULL_SCREEN                             *
000011DE                           395  *******************************************************************
000011DE                           396  *   PRE:   Max lines reached. Prompt user to continue.
000011DE                           397  *   POST:  Clears the screen and continues
000011DE                           398  *------------------------------------------------------------------
000011DE                           399  FULL_SCREEN 
000011DE  1E3C 0000                400          MOVE.B  #$00,D7             starts counter over
000011E2                           401          
000011E2  103C 000E                402          MOVE.B  #14,D0              asks user to continue
000011E6  43F9 000025CE            403          LEA     CONTINUEPROMPT,A1
000011EC  4E4F                     404          TRAP    #15
000011EE                           405          
000011EE  227C 00000000            406          MOVEA.L #$00000000,A1       move A1
000011F4  103C 0002                407          MOVE.B  #2,D0               user input
000011F8  4E4F                     408          TRAP    #15
000011FA                           409          
000011FA  6000 0002                410          BRA     CLEAR_SCREEN
000011FE                           411  
000011FE                           412  *-------------------------------------------------------------------
000011FE                           413  * Clears the screen if the user choose yes. Starts buffers over
000011FE                           414  *------------------------------------------------------------------- 
000011FE                           415  CLEAR_SCREEN
000011FE  323C FF00                416          MOVE.W  #$FF00,D1           clear screen                                      
00001202  103C 000B                417          MOVE.B  #11,D0
00001206  4E4F                     418          TRAP    #15
00001208                           419          
00001208  267C 00800000            420          MOVEA.L #$00800000,A3       reset valid buffer
0000120E  287C 00900000            421          MOVEA.L #$00900000,A4       reset invalid buffer
00001214                           422          
00001214  609C                     423          BRA     START_DISASSEMBLER
00001216                           424          
00001216                           425  *******************************************************************
00001216                           426  *                       BUFFER_ADDRESS                            *
00001216                           427  *******************************************************************
00001216                           428  *   PRE:   A3 VALID BUFFER
00001216                           429  *          A5 CURRENT ADDRESS
00001216                           430  *          
00001216                           431  *          D2 ADDRESS TO MINIPULATE
00001216                           432  *   POST:  Prints the current address and then increments by 1
00001216                           433  *------------------------------------------------------------------
00001216                           434  BUFFER_ADDRESS
00001216  4282                     435          CLR.L   D2                  clear data registers
00001218  4283                     436          CLR.L   D3
0000121A  260D                     437          MOVE.L  A5,D3
0000121C  2403                     438          MOVE.L  D3,D2               move the address location to D2
0000121E                           439          
0000121E  4EB9 00001280            440          JSR     ISOLATE_FIRST_DIGIT isolate and buffer MSD digit
00001224  4EB9 000012D4            441          JSR     CONVERT_AND_BUFFER
0000122A                           442          
0000122A  4EB9 0000128A            443          JSR     ISOLATE_SECOND_DIGIT
00001230  4EB9 000012D4            444          JSR     CONVERT_AND_BUFFER
00001236                           445          
00001236  4EB9 00001292            446          JSR     ISOLATE_THIRD_DIGIT
0000123C  4EB9 000012D4            447          JSR     CONVERT_AND_BUFFER
00001242                           448          
00001242  4EB9 0000129A            449          JSR     ISOLATE_FOURTH_DIGIT
00001248  4EB9 000012D4            450          JSR     CONVERT_AND_BUFFER
0000124E                           451          
0000124E  4EB9 000012A4            452          JSR     ISOLATE_FIFTH_DIGIT
00001254  4EB9 000012D4            453          JSR     CONVERT_AND_BUFFER
0000125A                           454          
0000125A  4EB9 000012AE            455          JSR     ISOLATE_SIXTH_DIGIT
00001260  4EB9 000012D4            456          JSR     CONVERT_AND_BUFFER
00001266                           457          
00001266  4EB9 000012BA            458          JSR     ISOLATE_SEVENTH_DIGIT
0000126C  4EB9 000012D4            459          JSR     CONVERT_AND_BUFFER
00001272                           460          
00001272  4EB9 000012C6            461          JSR     ISOLATE_EIGHTH_DIGIT isolate and buffer LSD digit
00001278  4EB9 000012D4            462          JSR     CONVERT_AND_BUFFER
0000127E                           463          
0000127E  4E75                     464          RTS
00001280                           465          
00001280                           466  *-------------------------------------------------------------------
00001280                           467  * Isolates the digits so we can convert them to ASCII to print
00001280                           468  *-------------------------------------------------------------------      
00001280                           469     
00001280                           470  ISOLATE_FIRST_DIGIT
00001280  E08A                     471          LSR.L   #8,D2
00001282  E08A                     472          LSR.L   #8,D2
00001284  E08A                     473          LSR.L   #8,D2
00001286  E88A                     474          LSR.L   #4,D2
00001288  4E75                     475          RTS
0000128A                           476      
0000128A                           477  ISOLATE_SECOND_DIGIT
0000128A  E98A                     478          LSL.L   #4,D2
0000128C  4EB8 1280                479          JSR     ISOLATE_FIRST_DIGIT
00001290  4E75                     480          RTS
00001292                           481          
00001292                           482  ISOLATE_THIRD_DIGIT
00001292  E18A                     483          LSL.L   #8,D2
00001294  4EB8 1280                484          JSR     ISOLATE_FIRST_DIGIT
00001298  4E75                     485          RTS
0000129A                           486  
0000129A                           487  ISOLATE_FOURTH_DIGIT
0000129A  E18A                     488          LSL.L   #8,D2
0000129C  E98A                     489          LSL.L   #4,D2
0000129E  4EB8 1280                490          JSR     ISOLATE_FIRST_DIGIT
000012A2  4E75                     491          RTS
000012A4                           492  
000012A4                           493  ISOLATE_FIFTH_DIGIT
000012A4  E18A                     494          LSL.L   #8,D2
000012A6  E18A                     495          LSL.L   #8,D2
000012A8  4EB8 1280                496          JSR     ISOLATE_FIRST_DIGIT
000012AC  4E75                     497          RTS
000012AE                           498          
000012AE                           499  ISOLATE_SIXTH_DIGIT
000012AE  E18A                     500          LSL.L   #8,D2
000012B0  E18A                     501          LSL.L   #8,D2
000012B2  E98A                     502          LSL.L   #4,D2
000012B4  4EB8 1280                503          JSR     ISOLATE_FIRST_DIGIT
000012B8  4E75                     504          RTS
000012BA                           505  
000012BA                           506  ISOLATE_SEVENTH_DIGIT
000012BA  E18A                     507          LSL.L   #8,D2
000012BC  E18A                     508          LSL.L   #8,D2
000012BE  E18A                     509          LSL.L   #8,D2
000012C0  4EB8 1280                510          JSR     ISOLATE_FIRST_DIGIT
000012C4  4E75                     511          RTS
000012C6                           512  
000012C6                           513  ISOLATE_EIGHTH_DIGIT
000012C6  E18A                     514          LSL.L   #8,D2
000012C8  E18A                     515          LSL.L   #8,D2
000012CA  E18A                     516          LSL.L   #8,D2
000012CC  E98A                     517          LSL.L   #4,D2
000012CE  4EB8 1280                518          JSR     ISOLATE_FIRST_DIGIT
000012D2  4E75                     519          RTS      
000012D4                           520          
000012D4                           521  *-------------------------------------------------------------------
000012D4                           522  * Converts the hex to ASCII for printing the address
000012D4                           523  *-------------------------------------------------------------------
000012D4                           524  CONVERT_AND_BUFFER
000012D4  4EB9 000012E0            525          JSR     CONVERT_TO_ASCII    convert to ASCII
000012DA  16C2                     526          MOVE.B  D2,(A3)+            put into buffer
000012DC                           527          
000012DC  2403                     528          MOVE.L  D3,D2               restore address
000012DE                           529          
000012DE  4E75                     530          RTS
000012E0                           531          
000012E0                           532  CONVERT_TO_ASCII
000012E0  B43C 000A                533          CMP.B   #$A,D2              find out if its letter or number
000012E4  6D00 0006                534          BLT     ASCII_NUMBER        number
000012E8  6000 0008                535          BRA     ASCII_LETTER        letter
000012EC                           536  
000012EC                           537  ASCII_NUMBER
000012EC  0602 0030                538          ADD.B   #$30,D2             convert to ascii number
000012F0  4E75                     539          RTS
000012F2                           540          
000012F2                           541  ASCII_LETTER
000012F2  0602 0037                542          ADD.B   #$37,D2             convert to ascii letter
000012F6  4E75                     543          RTS
000012F8                           544  
000012F8                           545  
000012F8                           546  *******************************************************************
000012F8                           547  *                     PRINT_INSTRUCTION                           *
000012F8                           548  *******************************************************************
000012F8                           549  *   PRE:    A2 
000012F8                           550  *           A3 VALID BUFFER
000012F8                           551  *           A4 INVALID BUFFER
000012F8                           552  *           A5 CURRENT ADDRESS
000012F8                           553  *           A6 ENDING ADDRESS
000012F8                           554  
000012F8                           555  *           D2 DATA TO MINIPULATE
000012F8                           556  *           D3 ORIGINAL CODE
000012F8                           557  *           D4 
000012F8                           558  *           D5 
000012F8                           559  *           D6
000012F8                           560  *           D7 MAX LINES TO PRINT (25)
000012F8                           561  *------------------------------------------------------------------
000012F8                           562  PRINT_INSTRUCTION
000012F8  361D                     563          MOVE.W  (A5)+,D3         move the data from A5 to D3
000012FA  6000 0002                564          BRA     OP_CODE_TABLE    check through the op code table
000012FE                           565  
000012FE                           566  ****************************************************************************************
000012FE                           567  *                               OPCODE                                                 *
000012FE                           568  ****************************************************************************************
000012FE                           569  
000012FE                           570  *******************************************************************
000012FE                           571  *                       OP_CODE_TABLE                             *
000012FE                           572  *******************************************************************
000012FE                           573  *   PRE:   D2 DATA TO MINIPULATE
000012FE                           574  *          D3 ORIGINAL CODE
000012FE                           575  *          D4 HOLDS CODE_BITMASK
000012FE                           576  *          D5 HOLDS OP_BITMASK
000012FE                           577  *          D6 HOLDS #$0000 TO COMPARE
000012FE                           578  *          D7 MAX LINES *
000012FE                           579  *          
000012FE                           580  *   POST:  Goes through the op codes to find out which one it is
000012FE                           581  *------------------------------------------------------------------
000012FE                           582  
000012FE                           583  OP_CODE_TABLE
000012FE  3403                     584          MOVE.W  D3,D2               move original to D2 to mess with
00001300  3C3C 0000                585          MOVE.W  #$0000,D6           #$0000 value to compare
00001304                           586          
00001304  4EB9 00001356            587          JSR     OPCODE_0000_TEST
0000130A  4EB9 00001368            588          JSR     OPCODE_0001_TEST
00001310  4EB9 0000137A            589          JSR     OPCODE_0010_TEST
00001316  4EB9 0000138C            590          JSR     OPCODE_0011_TEST
0000131C  4EB9 0000139E            591          JSR     OPCODE_0100_TEST
00001322  4EB9 000013B0            592          JSR     OPCODE_0101_TEST
00001328  4EB9 000013C2            593          JSR     OPCODE_0110_TEST
0000132E  4EB9 000013D4            594          JSR     OPCODE_1000_TEST
00001334  4EB9 000013E6            595          JSR     OPCODE_1001_TEST
0000133A  4EB9 000013F8            596          JSR     OPCODE_1011_TEST
00001340  4EB9 0000140A            597          JSR     OPCODE_1100_TEST
00001346  4EB9 0000141C            598          JSR     OPCODE_1101_TEST
0000134C  4EB9 0000142E            599          JSR     OPCODE_1110_TEST
00001352                           600          
00001352  6000 1160                601          BRA     INVALID_DATA        not one of the op codes we're disassembling
00001356                           602  
00001356                           603  *******************************************************************
00001356                           604  *           OPCODE TESTS :: load op bitask to D5                  *
00001356                           605  *                           XOR instruction to D5                 *
00001356                           606  *                           AND 1111 to XOR'd OP                  *
00001356                           607  *                           check if all 0s                       *
00001356                           608  *                           if all 0s then found op code          *  
00001356                           609  *                           if not go back to table and check next*
00001356                           610  *******************************************************************
00001356                           611  
00001356                           612  OPCODE_0000_TEST
00001356  3A3C 0000                613          MOVE.W  #OP_0000_BITMASK,D5     load 0000 bitmask to D5
0000135A  B545                     614          EOR.W   D2,D5                   XOR instruction to D5
0000135C  CA7C F000                615          AND.W   #OP_AND_BITMASK,D5      AND 1111 to XOR'd OP
00001360  BC45                     616          CMP.W   D5,D6                   check if all 0s
00001362  6700 00DC                617          BEQ     OPCODE_0000             if all 0s then 0000 op code
00001366  4E75                     618          RTS                             if not go back to table and check next
00001368                           619          
00001368                           620  OPCODE_0001_TEST
00001368  3A3C 1000                621          MOVE.W  #OP_0001_BITMASK,D5     same but for 0001
0000136C  B545                     622          EOR.W   D2,D5               
0000136E  CA7C F000                623          AND.W   #OP_AND_BITMASK,D5       
00001372  BC45                     624          CMP.W   D5,D6               
00001374  6700 0102                625          BEQ     OPCODE_0001         
00001378  4E75                     626          RTS                         
0000137A                           627          
0000137A                           628  OPCODE_0010_TEST
0000137A  3A3C 2000                629          MOVE.W  #OP_0010_BITMASK,D5     same but for 0010
0000137E  B545                     630          EOR.W   D2,D5               
00001380  CA7C F000                631          AND.W   #OP_AND_BITMASK,D5       
00001384  BC45                     632          CMP.W   D5,D6               
00001386  6700 00F6                633          BEQ     OPCODE_0010        
0000138A  4E75                     634          RTS         
0000138C                           635  
0000138C                           636  OPCODE_0011_TEST
0000138C  3A3C 3000                637          MOVE.W  #OP_0011_BITMASK,D5     same but for 0011
00001390  B545                     638          EOR.W   D2,D5               
00001392  CA7C F000                639          AND.W   #OP_AND_BITMASK,D5       
00001396  BC45                     640          CMP.W   D5,D6               
00001398  6700 00FC                641          BEQ     OPCODE_0011        
0000139C  4E75                     642          RTS                   
0000139E                           643          
0000139E                           644  OPCODE_0100_TEST
0000139E  3A3C 4000                645          MOVE.W  #OP_0100_BITMASK,D5     same but for 0100
000013A2  B545                     646          EOR.W   D2,D5               
000013A4  CA7C F000                647          AND.W   #OP_AND_BITMASK,D5       
000013A8  BC45                     648          CMP.W   D5,D6               
000013AA  6700 0102                649          BEQ     OPCODE_0100        
000013AE  4E75                     650          RTS 
000013B0                           651          
000013B0                           652  OPCODE_0101_TEST
000013B0  3A3C 5000                653          MOVE.W  #OP_0101_BITMASK,D5     same but for 0101
000013B4  B545                     654          EOR.W   D2,D5               
000013B6  CA7C F000                655          AND.W   #OP_AND_BITMASK,D5       
000013BA  BC45                     656          CMP.W   D5,D6               
000013BC  6700 0144                657          BEQ     OPCODE_0101        
000013C0  4E75                     658          RTS 
000013C2                           659          
000013C2                           660  OPCODE_0110_TEST
000013C2  3A3C 6000                661          MOVE.W  #OP_0110_BITMASK,D5     same but for 0110
000013C6  B545                     662          EOR.W   D2,D5               
000013C8  CA7C F000                663          AND.W   #OP_AND_BITMASK,D5       
000013CC  BC45                     664          CMP.W   D5,D6               
000013CE  6700 0156                665          BEQ     OPCODE_0110        
000013D2  4E75                     666          RTS 
000013D4                           667          
000013D4                           668  OPCODE_1000_TEST
000013D4  3A3C 8000                669          MOVE.W  #OP_1000_BITMASK,D5     same but for 1000
000013D8  B545                     670          EOR.W   D2,D5               
000013DA  CA7C F000                671          AND.W   #OP_AND_BITMASK,D5       
000013DE  BC45                     672          CMP.W   D5,D6               
000013E0  6700 019C                673          BEQ     OPCODE_1000        
000013E4  4E75                     674          RTS 
000013E6                           675          
000013E6                           676  OPCODE_1001_TEST
000013E6  3A3C 9000                677          MOVE.W  #OP_1001_BITMASK,D5     same but for 1001
000013EA  B545                     678          EOR.W   D2,D5               
000013EC  CA7C F000                679          AND.W   #OP_AND_BITMASK,D5       
000013F0  BC45                     680          CMP.W   D5,D6               
000013F2  6700 01C0                681          BEQ     OPCODE_1001        
000013F6  4E75                     682          RTS 
000013F8                           683          
000013F8                           684  OPCODE_1011_TEST
000013F8  3A3C B000                685          MOVE.W  #OP_1011_BITMASK,D5     same but for 1011
000013FC  B545                     686          EOR.W   D2,D5               
000013FE  CA7C F000                687          AND.W   #OP_AND_BITMASK,D5       
00001402  BC45                     688          CMP.W   D5,D6               
00001404  6700 01D2                689          BEQ     OPCODE_1011        
00001408  4E75                     690          RTS 
0000140A                           691          
0000140A                           692  OPCODE_1100_TEST
0000140A  3A3C C000                693          MOVE.W  #OP_1100_BITMASK,D5     same but for 1100
0000140E  B545                     694          EOR.W   D2,D5               
00001410  CA7C F000                695          AND.W   #OP_AND_BITMASK,D5       
00001414  BC45                     696          CMP.W   D5,D6               
00001416  6700 01F4                697          BEQ     OPCODE_1100      
0000141A  4E75                     698          RTS 
0000141C                           699          
0000141C                           700  OPCODE_1101_TEST
0000141C  3A3C D000                701          MOVE.W  #OP_1101_BITMASK,D5     same but for 1101
00001420  B545                     702          EOR.W   D2,D5               
00001422  CA7C F000                703          AND.W   #OP_AND_BITMASK,D5       
00001426  BC45                     704          CMP.W   D5,D6               
00001428  6700 01F4                705          BEQ     OPCODE_1101        
0000142C  4E75                     706          RTS 
0000142E                           707          
0000142E                           708  OPCODE_1110_TEST
0000142E  3A3C E000                709          MOVE.W  #OP_1110_BITMASK,D5     same but for 1110
00001432  B545                     710          EOR.W   D2,D5               
00001434  CA7C F000                711          AND.W   #OP_AND_BITMASK,D5       
00001438  BC45                     712          CMP.W   D5,D6               
0000143A  6700 0206                713          BEQ     OPCODE_1110        
0000143E  4E75                     714          RTS
00001440                           715          
00001440                           716  *******************************************************************
00001440                           717  *           OPCODE_0000 ::                                        *
00001440                           718  *                            ORI, CMPI, BCLR                      *
00001440                           719  *******************************************************************
00001440                           720  OPCODE_0000
00001440                           721  * ORI
00001440  3A3C 0F00                722          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
00001444  CA42                     723          AND.W   D2,D5                   and with instruction
00001446  BA7C 0000                724          CMP.W   #$0000,D5               ORI
0000144A  6700 020A                725          BEQ     ORI                     
0000144E                           726          
0000144E                           727  * CMPI
0000144E  3A3C 0F00                728          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
00001452  CA42                     729          AND.W   D2,D5                   and with instruction
00001454  BA7C 0C00                730          CMP.W   #$0C00,D5               CMPI
00001458  6700 0304                731          BEQ     CMPI
0000145C                           732          
0000145C                           733  * BCLR
0000145C  3A3C 01C0                734          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001460  CA42                     735          AND.W   D2,D5                   and with instruction
00001462  BA7C 0180                736          CMP.W   #$0180,D5               BLCR_DN_EA
00001466  6700 03FC                737          BEQ     BCLR_DN_EA
0000146A                           738          
0000146A  3A3C 0FC0                739          MOVE.W  #BIT_11_TO_06,D5        bitmask bits 08-06
0000146E  CA42                     740          AND.W   D2,D5
00001470  BA7C 0880                741          CMP.W   #$0880,D5               BLCR_IM_EA
00001474  6700 0498                742          BEQ     BCLR_IM_EA
00001478                           743  
00001478                           744  *******************************************************************
00001478                           745  *           OPCODE_0001 ::                                        *
00001478                           746  *                            MOVEB                               *
00001478                           747  *******************************************************************
00001478                           748  OPCODE_0001
00001478                           749  * MOVE.B
00001478  7200                     750          MOVE.L  #$00000000,D1           word / in case immediate
0000147A  6000 0634                751          BRA     MOVEB                   OP code is for MOVE.B
0000147E                           752          
0000147E                           753  *******************************************************************
0000147E                           754  *           OPCODE_0010 ::                                        *
0000147E                           755  *                           MOVEA.L, MOVE.L                       *
0000147E                           756  *******************************************************************
0000147E                           757  OPCODE_0010
0000147E  3A3C 01C0                758          MOVE.W  #D_MODE_BITMASK,D5      bitmask dest mode
00001482  CA42                     759          AND.W   D2,D5                   and with instruction
00001484  EC4D                     760          LSR.W   #6,D5                   shift dest mode right
00001486                           761          
00001486  123C 0001                762          MOVE.B  #%1,D1                  long / in case immediate
0000148A                           763          
0000148A  BA3C 0001                764          CMP.B   #1,D5                   compare with 001
0000148E                           765          
0000148E                           766  * MOVEA.L
0000148E  6700 06A4                767          BEQ     MOVEAL                  if equal it's a MOVEA.L
00001492                           768          
00001492                           769  * MOVE.L
00001492  6000 065E                770          BRA     MOVEL                   if not MOVEL
00001496                           771          
00001496                           772  *******************************************************************
00001496                           773  *           OPCODE_0011 ::                                        *
00001496                           774  *                           MOVEA.W, MOVE.W                       *
00001496                           775  *******************************************************************
00001496                           776  OPCODE_0011
00001496  3A3C 01C0                777          MOVE.W  #D_MODE_BITMASK,D5      bitmask dest mode
0000149A  CA42                     778          AND.W   D2,D5                   and with instruction
0000149C  EC4D                     779          LSR.W   #6,D5                   shift dest mode right
0000149E                           780          
0000149E                           781          
0000149E  123C 0000                782          MOVE.B  #%0,D1                  WORD / in case immediate
000014A2  BA3C 0001                783          CMP.B   #1,D5                   compare with 001
000014A6                           784  * MOVEA.W
000014A6  6700 0714                785          BEQ     MOVEAW                  if equal it's a MOVEA.W
000014AA                           786          
000014AA                           787  * MOVE.W
000014AA  6000 06CE                788          BRA     MOVEW                   if not MOVEW
000014AE                           789          
000014AE                           790  *******************************************************************
000014AE                           791  *           OPCODE_0100 ::                                        *
000014AE                           792  *                           NEG, RTS, JSR, MOVEM, LEA             *
000014AE                           793  *******************************************************************
000014AE                           794  OPCODE_0100
000014AE                           795  * RTS
000014AE  B47C 4E75                796          CMP.W   #%0100111001110101,D2   RTS instruction
000014B2  6700 07E4                797          BEQ     RTS
000014B6                           798             
000014B6                           799  * NEG
000014B6  3A3C 0FC0                800          MOVE.W  #BIT_11_TO_06,D5        bitmask bits 11-06
000014BA  CA42                     801          AND.W   D2,D5                   and with instruction
000014BC  EC4D                     802          LSR.W   #6,D5                   shift right
000014BE  BA3C 0010                803          CMP.B   #%000010000,D5          NEG byte
000014C2  6700 073E                804          BEQ     NEGB                
000014C6  BA3C 0011                805          CMP.B   #%000010001,D5          NEG word
000014CA  6700 0768                806          BEQ     NEGW
000014CE  BA3C 0012                807          CMP.B   #%000010010,D5          NEG long
000014D2  6700 0792                808          BEQ     NEGL
000014D6  BA3C 0013                809          CMP.B   #%000010011,D5          MOVE to CCR / invalid
000014DA  6700 0FD8                810          BEQ     INVALID_DATA
000014DE                           811  
000014DE                           812  * JSR
000014DE  3A3C 0FC0                813          MOVE.W  #BIT_11_TO_06,D5        bitmask bits 11-06
000014E2  CA42                     814          AND.W   D2,D5                   and with instruction
000014E4  EC4D                     815          LSR.W   #6,D5                   shift right
000014E6  BA3C 003A                816          CMP.B   #%00111010,D5           JSR
000014EA  6700 07C8                817          BEQ     JSR
000014EE                           818          
000014EE                           819  * LEA
000014EE  3A3C 01C0                820          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
000014F2  CA42                     821          AND.W   D2,D5                   and with instruction
000014F4  EC4D                     822          LSR.W   #6,D5                   shift right
000014F6  BA3C 0007                823          CMP.B   #%00000111,D5           LEA
000014FA  6700 07E2                824          BEQ     LEA
000014FE                           825          
000014FE                           826  * MOVEM
000014FE                           827  *        MOVE.W  #%0000111110111000,D5   bitmask bits 11-03 minus 6
000014FE                           828  *        AND.W   D2,D5                   and with instruction
000014FE                           829  *        CMP.W   #%0000100010000000,D5   EXT
000014FE                           830  *        BEQ     INVALID_DATA            invalid
000014FE                           831  *        
000014FE                           832  *        MOVE.W  #%0000101110000000,D5   bitmask bits 11-08 minus 10
000014FE                           833  *        AND.W   D2,D5                   and with instruction
000014FE                           834  *        CMP.W   #%0000100010000000,D5   MOVEM
000014FE                           835  *        BEQ     MOVEM
000014FE                           836          
000014FE  6000 0FB4                837          BRA     INVALID_DATA    
00001502                           838          
00001502                           839  *******************************************************************
00001502                           840  *           OPCODE_0101 ::                                        *
00001502                           841  *                           SUBQ                                  *
00001502                           842  *******************************************************************
00001502                           843  OPCODE_0101
00001502  3A3C 00C0                844          MOVE.W  #BIT_07_TO_06,D5        bitmask bits 07-06
00001506  CA42                     845          AND.W   D2,D5                   and with instruction        
00001508  EC4D                     846          LSR.W   #6,D5
0000150A                           847  *Scc_DBcc        
0000150A  BA7C 0003                848          CMP.W   #3,D5        
0000150E  6700 0FA4                849          BEQ     INVALID_DATA
00001512                           850          
00001512  3A3C 0100                851          MOVE.W  #BIT_08_BITMASK,D5        bitmask bits 08
00001516  CA42                     852          AND.W   D2,D5                   and with instruction        
00001518  E04D                     853          LSR.W   #8,D5
0000151A                           854  *ADDQ        
0000151A  BA7C 0000                855          CMP.W   #%0,D5        
0000151E  6700 0F94                856          BEQ     INVALID_DATA
00001522                           857  *SUBQ 
00001522  6000 0B6E                858          BRA     SUBQ  
00001526                           859          
00001526                           860  *******************************************************************
00001526                           861  *           OPCODE_0110 ::                                        *
00001526                           862  *                           BRA, BCC, BCS, BGE, BLT, BVC          *
00001526                           863  *******************************************************************
00001526                           864  OPCODE_0110
00001526                           865  * BRA
00001526  3A3C 0F00                866          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
0000152A  CA42                     867          AND.W   D2,D5                   and with instruction
0000152C  BA7C 0000                868          CMP.W   #$0000,D5               BRA
00001530  6700 07EE                869          BEQ     BRA
00001534                           870          
00001534                           871  * BCC
00001534  3A3C 0F00                872          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
00001538  CA42                     873          AND.W   D2,D5                   and with instruction
0000153A  BA7C 0400                874          CMP.W   #$0400,D5               BCC
0000153E  6700 0814                875          BEQ     BCC
00001542                           876          
00001542                           877  * BCS
00001542  3A3C 0F00                878          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
00001546  CA42                     879          AND.W   D2,D5                   and with instruction
00001548  BA7C 0500                880          CMP.W   #$0500,D5               BCS
0000154C  6700 083A                881          BEQ     BCS
00001550                           882          
00001550                           883  * BGE
00001550  3A3C 0F00                884          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
00001554  CA42                     885          AND.W   D2,D5                   and with instruction
00001556  BA7C 0C00                886          CMP.W   #$0C00,D5               BGE
0000155A  6700 0860                887          BEQ     BGE
0000155E                           888  
0000155E                           889  * BLT
0000155E  3A3C 0F00                890          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
00001562  CA42                     891          AND.W   D2,D5                   and with instruction
00001564  BA7C 0D00                892          CMP.W   #$0D00,D5               BLT
00001568  6700 0886                893          BEQ     BLT
0000156C                           894          
0000156C                           895  * BVC
0000156C  3A3C 0F00                896          MOVE.W  #BIT_11_TO_08,D5        bitmask bits 11-08
00001570  CA42                     897          AND.W   D2,D5                   and with instruction
00001572  BA7C 0800                898          CMP.W   #$0800,D5               BVC
00001576  6700 08AC                899          BEQ     BVC
0000157A                           900          
0000157A  6000 0F38                901          BRA     INVALID_DATA
0000157E                           902  *******************************************************************
0000157E                           903  *           OPCODE_1000 ::                                        *
0000157E                           904  *                           DIVS, OR                              *
0000157E                           905  *******************************************************************
0000157E                           906  OPCODE_1000
0000157E                           907  *DIVS
0000157E  3A3C 01C0                908          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001582  CA42                     909          AND.W   D2,D5                   and with instruction
00001584  BA7C 01C0                910          CMP.W   #$01C0,D5               DIVS
00001588  6700 08CE                911          BEQ     DIVS
0000158C                           912          
0000158C                           913  *OR
0000158C  3A3C 01C0                914          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001590  CA42                     915          AND.W   D2,D5                   and with instruction
00001592  BA7C 00C0                916          CMP.W   #$00C0,D5               DIVU
00001596  6700 0F1C                917          BEQ     INVALID_DATA            invalid
0000159A                           918          
0000159A  3A3C 01C0                919          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-04
0000159E  0645 0020                920          ADD.W   #BIT_05_BITMASK,D5
000015A2  0645 0010                921          ADD.W   #BIT_04_BITMASK,D5
000015A6  CA42                     922          AND.W   D2,D5                   and with instruction
000015A8  BA7C 0100                923          CMP.W   #$0100,D5               SBCD
000015AC  6700 0F06                924          BEQ     INVALID_DATA            invalid data
000015B0                           925          
000015B0  6000 08F6                926          BRA     OR                      else OR operation
000015B4                           927          
000015B4                           928  *******************************************************************
000015B4                           929  *           OPCODE_1001 ::                                        *
000015B4                           930  *                           SUB, SUBX, SUBA                                   *
000015B4                           931  *******************************************************************
000015B4                           932  OPCODE_1001
000015B4  3A3C 00C0                933          MOVE.W  #BIT_07_TO_06,D5        bitmask bits 07-06
000015B8  CA42                     934          AND.W   D2,D5                   and with instruction        
000015BA  EC4D                     935          LSR.W   #6,D5
000015BC                           936  *SUBA        
000015BC  BA7C 0003                937          CMP.W   #3,D5        
000015C0  6700 0EF2                938          BEQ     INVALID_DATA
000015C4                           939          
000015C4  3A3C 0130                940          MOVE.W  #%0000000100110000,D5        bitmask bits 07-06
000015C8  CA42                     941          AND.W   D2,D5                   and with instruction        
000015CA  E84D                     942          LSR.W   #4,D5
000015CC                           943  *SUBX        
000015CC  BA7C 0013                944          CMP.W   #%10011,D5        
000015D0  6700 0EE2                945          BEQ     INVALID_DATA
000015D4                           946  *SUB 
000015D4  6000 0A96                947          BRA     SUB  
000015D8                           948          
000015D8                           949  *******************************************************************
000015D8                           950  *           OPCODE_1011 ::                                        *
000015D8                           951  *                           EOR, CMP                              *
000015D8                           952  *******************************************************************
000015D8                           953  OPCODE_1011
000015D8  3A3C 00C0                954          MOVE.W  #BIT_07_TO_06,D5        bitmask bits 07-06
000015DC  CA42                     955          AND.W   D2,D5                   and with instruction
000015DE  EC4D                     956          LSR.W   #6,D5
000015E0                           957  *CMPA
000015E0  BA7C 0003                958          CMP.W   #%11,D5               
000015E4  6700 0ECE                959          BEQ     INVALID_DATA
000015E8                           960          
000015E8  3A3C 0100                961          MOVE.W  #BIT_08_BITMASK,D5      Bitmask bits 08
000015EC  CA42                     962          AND.W   D2,D5                   and with instruction
000015EE  E04D                     963          LSR.W   #8,D5
000015F0                           964  *CMP
000015F0  BA7C 0000                965          CMP.W   #0,D5               
000015F4  6700 042A                966          BEQ     CMP
000015F8                           967          
000015F8  3A3C 0038                968          MOVE.W  #S_MODE_BITMASK,D5        Bitmask bits 05-03
000015FC  CA42                     969          AND.W   D2,D5                   and with instruction
000015FE  E64D                     970          LSR.W   #3,D5
00001600                           971  *CMPM
00001600  BA7C 0001                972          CMP.W   #1,D5               
00001604  6700 0EAE                973          BEQ     INVALID_DATA
00001608                           974  *EOR        
00001608  6000 045E                975          BRA     EOR
0000160C                           976  
0000160C                           977  *******************************************************************
0000160C                           978  *           OPCODE_1100 ::                                        *
0000160C                           979  *                           MULS                                  *
0000160C                           980  *******************************************************************
0000160C                           981  OPCODE_1100
0000160C  3A3C 01C0                982          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001610  CA42                     983          AND.W   D2,D5                   and with instruction
00001612  BA7C 01C0                984          CMP.W   #$01C0,D5               MULS
00001616  6700 0A04                985          BEQ     MULS
0000161A                           986          
0000161A  6000 0E98                987          BRA     INVALID_DATA            invalid data
0000161E                           988          
0000161E                           989  *******************************************************************
0000161E                           990  *           OPCODE_1101 ::                                        *
0000161E                           991  *                           ADD, ADDA                             *
0000161E                           992  *******************************************************************
0000161E                           993  OPCODE_1101
0000161E  3A3C 00C0                994          MOVE.W  #BIT_07_TO_06,D5        bitmask bits 07-06
00001622  CA42                     995          AND.W   D2,D5                   and with instruction        
00001624  EC4D                     996          LSR.W   #6,D5
00001626                           997  *ADDA        
00001626  BA7C 0003                998          CMP.W   #3,D5        
0000162A  6700 03AC                999          BEQ     ADDA
0000162E                          1000          
0000162E  3A3C 0130               1001          MOVE.W  #%0000000100110000,D5        bitmask bits 07-06
00001632  CA42                    1002          AND.W   D2,D5                   and with instruction        
00001634  E84D                    1003          LSR.W   #4,D5
00001636                          1004  *ADDX        
00001636  BA7C 0013               1005          CMP.W   #%10011,D5        
0000163A  6700 0E78               1006          BEQ     INVALID_DATA
0000163E                          1007  *ADD 
0000163E  6000 0312               1008          BRA     ADD                                                        
00001642                          1009          
00001642                          1010  *******************************************************************
00001642                          1011  *           OPCODE_1110 ::                                        *
00001642                          1012  *                           ASL, ASR, LSL, LSR, ROL, ROR          *
00001642                          1013  *******************************************************************
00001642                          1014  OPCODE_1110
00001642  3A3C 00C0               1015          MOVE.W  #BIT_07_TO_06,D5        bitmask bits 07-06
00001646  CA42                    1016          AND.W   D2,D5                   and with instruction        
00001648  EC4D                    1017          LSR.W   #6,D5
0000164A  BA7C 0003               1018          CMP.W   #%11,D5 
0000164E                          1019          
0000164E                          1020  *1110_MEMORY_SHIFT               
0000164E  6700 0A8A               1021          BEQ     MEMORY_SHIFT_1110
00001652                          1022          
00001652                          1023  *1110_REGISTER_SHIFT   
00001652  6000 0B08               1024          BRA     REGISTER_SHIFT_1110     not memory shift therefore register shift
00001656                          1025          
00001656                          1026  ****************************************************************************************
00001656                          1027  *                               EFFECTIVE ADDRESSING                                   *
00001656                          1028  ****************************************************************************************
00001656                          1029  *   PRE:   D2 DATA TO MINIPULATE
00001656                          1030  *          D3 ORIGINAL CODE
00001656                          1031  *          D4 HOLDS BITMASK
00001656                          1032  *          D5 HOLDS MODE
00001656                          1033  *          D6 HOLDS REGISTER 
00001656                          1034  *          D7 MAX LINES *
00001656                          1035  *          
00001656                          1036  *   POST:  Goes through the op codes to find out which one it is
00001656                          1037  *------------------------------------------------------------------
00001656                          1038  
00001656                          1039  *******************************************************************
00001656                          1040  *          ORI                                                    *
00001656                          1041  *******************************************************************
00001656                          1042  ORI
00001656                          1043  * invalid
00001656  3A3C 003F               1044          MOVE.W  #BIT_05_TO_00,D5    bitmask for bits 05-00
0000165A  CA42                    1045          AND.W   D2,D5               and with instruction
0000165C  BA7C 003C               1046          CMP.W   #$003C,D5           invalid
00001660  6700 0E52               1047          BEQ     INVALID_DATA
00001664                          1048  
00001664                          1049  * ORI.B
00001664  3A3C 0080               1050          MOVE.W  #BIT_07_BITMASK,D5  bitmask for bits 07-06
00001668  0645 0040               1051          ADD.W   #BIT_06_BITMASK,D5
0000166C  CA42                    1052          AND.W   D2,D5               and with instruction
0000166E  BA7C 0000               1053          CMP.W   #$0000,D5           byte
00001672  6700 002A               1054          BEQ     ORIB
00001676                          1055  
00001676                          1056  * ORI.W
00001676  3A3C 0080               1057          MOVE.W  #BIT_07_BITMASK,D5  bitmask for bits 07-06
0000167A  0645 0040               1058          ADD.W   #BIT_06_BITMASK,D5
0000167E  CA42                    1059          AND.W   D2,D5               and with instruction
00001680  BA7C 0040               1060          CMP.W   #$0040,D5           word
00001684  6700 0058               1061          BEQ     ORIW
00001688                          1062  
00001688                          1063  * ORI.L           
00001688  3A3C 0080               1064          MOVE.W  #BIT_07_BITMASK,D5  bitmask for bits 07-06
0000168C  0645 0040               1065          ADD.W   #BIT_06_BITMASK,D5
00001690  CA42                    1066          AND.W   D2,D5               and with instruction
00001692  BA7C 0080               1067          CMP.W   #$0080,D5           long
00001696  6700 0086               1068          BEQ     ORIL
0000169A                          1069          
0000169A  6000 0E18               1070          BRA     INVALID_DATA
0000169E                          1071          
0000169E                          1072  ORIB
0000169E  16FC 004F               1073          MOVE.B  #'O',(A3)+              add OR.B to buffer
000016A2  16FC 0052               1074          MOVE.B  #'R',(A3)+
000016A6  16FC 0049               1075          MOVE.B  #'I',(A3)+
000016AA  16FC 002E               1076          MOVE.B  #'.',(A3)+
000016AE  16FC 0042               1077          MOVE.B  #'B',(A3)+
000016B2  16FC 0020               1078          MOVE.B  #' ',(A3)+
000016B6  16FC 0020               1079          MOVE.B  #' ',(A3)+
000016BA                          1080          
000016BA  7200                    1081          MOVE.L  #$00000000,D1           clear D1 to check immediate word
000016BC  4EB9 00002378           1082          JSR     IMMEDIATE_DATA_WORD     print immediate data
000016C2  4EB9 0000247A           1083          JSR     BUFFER_COMMA            buffer comma
000016C8  4EB9 000022BA           1084          JSR     SOURCE_MOVE             buffer EA
000016CE  4EB9 0000248E           1085          JSR     PRINT_VALID_BUFFER      print what's in buffer
000016D4  4EB9 00002480           1086          JSR     PRINT_NEWLINE           print new line
000016DA                          1087          
000016DA  6000 FAD6               1088          BRA     START_DISASSEMBLER
000016DE                          1089          
000016DE                          1090  ORIW
000016DE  16FC 004F               1091          MOVE.B  #'O',(A3)+              add ORI.W to buffer
000016E2  16FC 0052               1092          MOVE.B  #'R',(A3)+
000016E6  16FC 0049               1093          MOVE.B  #'I',(A3)+
000016EA  16FC 002E               1094          MOVE.B  #'.',(A3)+
000016EE  16FC 0057               1095          MOVE.B  #'W',(A3)+
000016F2  16FC 0020               1096          MOVE.B  #' ',(A3)+
000016F6  16FC 0020               1097          MOVE.B  #' ',(A3)+
000016FA                          1098          
000016FA  7200                    1099          MOVE.L  #$00000000,D1           clear D1
000016FC  4EB9 00002378           1100          JSR     IMMEDIATE_DATA_WORD     print immediate data
00001702  4EB9 0000247A           1101          JSR     BUFFER_COMMA            buffer comma
00001708  4EB9 000022BA           1102          JSR     SOURCE_MOVE             buffer EA
0000170E  4EB9 0000248E           1103          JSR     PRINT_VALID_BUFFER      print what's in buffer
00001714  4EB9 00002480           1104          JSR     PRINT_NEWLINE           print new line
0000171A                          1105          
0000171A  6000 FA96               1106          BRA     START_DISASSEMBLER 
0000171E                          1107  
0000171E                          1108  ORIL
0000171E  16FC 004F               1109          MOVE.B  #'O',(A3)+              add ORI.L to buffer
00001722  16FC 0052               1110          MOVE.B  #'R',(A3)+
00001726  16FC 0049               1111          MOVE.B  #'I',(A3)+
0000172A  16FC 002E               1112          MOVE.B  #'.',(A3)+
0000172E  16FC 004C               1113          MOVE.B  #'L',(A3)+
00001732  16FC 0020               1114          MOVE.B  #' ',(A3)+
00001736  16FC 0020               1115          MOVE.B  #' ',(A3)+
0000173A                          1116          
0000173A  7200                    1117          MOVE.L  #$00000000,D1           clear D1
0000173C  4EB9 0000238E           1118          JSR     IMMEDIATE_DATA_LONG     print immediate data
00001742  4EB9 0000247A           1119          JSR     BUFFER_COMMA            buffer comma
00001748  4EB9 000022BA           1120          JSR     SOURCE_MOVE             buffer EA
0000174E  4EB9 0000248E           1121          JSR     PRINT_VALID_BUFFER      print what's in buffer
00001754  4EB9 00002480           1122          JSR     PRINT_NEWLINE           print new line
0000175A                          1123          
0000175A  6000 FA56               1124          BRA     START_DISASSEMBLER
0000175E                          1125          
0000175E                          1126  *******************************************************************
0000175E                          1127  *          CMPI                                                   *
0000175E                          1128  ******************************************************************* 
0000175E                          1129  CMPI
0000175E                          1130  * CMPI.B
0000175E  3A3C 0080               1131          MOVE.W  #BIT_07_BITMASK,D5  bitmask for bits 07-06
00001762  0645 0040               1132          ADD.W   #BIT_06_BITMASK,D5
00001766  CA42                    1133          AND.W   D2,D5               and with instruction
00001768  BA7C 0000               1134          CMP.W   #$0000,D5           byte
0000176C  6700 002A               1135          BEQ     CMPIB
00001770                          1136          
00001770                          1137  * CMPI.W
00001770  3A3C 0080               1138          MOVE.W  #BIT_07_BITMASK,D5  bitmask for bits 07-06
00001774  0645 0040               1139          ADD.W   #BIT_06_BITMASK,D5
00001778  CA42                    1140          AND.W   D2,D5               and with instruction
0000177A  BA7C 0040               1141          CMP.W   #$0040,D5           word
0000177E  6700 005C               1142          BEQ     CMPIW
00001782                          1143          
00001782                          1144  * CMPI.B
00001782  3A3C 0080               1145          MOVE.W  #BIT_07_BITMASK,D5  bitmask for bits 07-06
00001786  0645 0040               1146          ADD.W   #BIT_06_BITMASK,D5
0000178A  CA42                    1147          AND.W   D2,D5               and with instruction
0000178C  BA7C 0080               1148          CMP.W   #$0080,D5           long
00001790  6700 008E               1149          BEQ     CMPIL
00001794                          1150          
00001794  6000 0D1E               1151          BRA     INVALID_DATA
00001798                          1152          
00001798                          1153  CMPIB
00001798  16FC 0043               1154          MOVE.B  #'C',(A3)+              add CMPI.B to buffer
0000179C  16FC 004D               1155          MOVE.B  #'M',(A3)+
000017A0  16FC 0050               1156          MOVE.B  #'P',(A3)+
000017A4  16FC 0049               1157          MOVE.B  #'I',(A3)+
000017A8  16FC 002E               1158          MOVE.B  #'.',(A3)+
000017AC  16FC 0042               1159          MOVE.B  #'B',(A3)+
000017B0  16FC 0020               1160          MOVE.B  #' ',(A3)+
000017B4  16FC 0020               1161          MOVE.B  #' ',(A3)+
000017B8                          1162          
000017B8  7200                    1163          MOVE.L  #$00000000,D1           clear D1
000017BA  4EB9 00002378           1164          JSR     IMMEDIATE_DATA_WORD     print immediate data
000017C0  4EB9 0000247A           1165          JSR     BUFFER_COMMA            buffer comma
000017C6  4EB9 000022BA           1166          JSR     SOURCE_MOVE             buffer EA
000017CC  4EB9 0000248E           1167          JSR     PRINT_VALID_BUFFER      print what's in buffer
000017D2  4EB9 00002480           1168          JSR     PRINT_NEWLINE           print new line
000017D8                          1169          
000017D8  6000 F9D8               1170          BRA     START_DISASSEMBLER
000017DC                          1171          
000017DC                          1172  CMPIW
000017DC  16FC 0043               1173          MOVE.B  #'C',(A3)+              add CMPI.W to buffer
000017E0  16FC 004D               1174          MOVE.B  #'M',(A3)+
000017E4  16FC 0050               1175          MOVE.B  #'P',(A3)+
000017E8  16FC 0049               1176          MOVE.B  #'I',(A3)+
000017EC  16FC 002E               1177          MOVE.B  #'.',(A3)+
000017F0  16FC 0057               1178          MOVE.B  #'W',(A3)+
000017F4  16FC 0020               1179          MOVE.B  #' ',(A3)+
000017F8  16FC 0020               1180          MOVE.B  #' ',(A3)+
000017FC                          1181          
000017FC  7200                    1182          MOVE.L  #$00000000,D1           clear D1
000017FE  4EB9 00002378           1183          JSR     IMMEDIATE_DATA_WORD     print immediate data
00001804  4EB9 0000247A           1184          JSR     BUFFER_COMMA            buffer comma
0000180A  4EB9 000022BA           1185          JSR     SOURCE_MOVE             buffer EA
00001810  4EB9 0000248E           1186          JSR     PRINT_VALID_BUFFER      print what's in buffer
00001816  4EB9 00002480           1187          JSR     PRINT_NEWLINE           print new line
0000181C                          1188          
0000181C  6000 F994               1189          BRA     START_DISASSEMBLER
00001820                          1190          
00001820                          1191  CMPIL
00001820  16FC 0043               1192          MOVE.B  #'C',(A3)+              add CMPI.L to buffer
00001824  16FC 004D               1193          MOVE.B  #'M',(A3)+
00001828  16FC 0050               1194          MOVE.B  #'P',(A3)+
0000182C  16FC 0049               1195          MOVE.B  #'I',(A3)+
00001830  16FC 002E               1196          MOVE.B  #'.',(A3)+
00001834  16FC 004C               1197          MOVE.B  #'L',(A3)+
00001838  16FC 0020               1198          MOVE.B  #' ',(A3)+
0000183C  16FC 0020               1199          MOVE.B  #' ',(A3)+
00001840                          1200          
00001840  7200                    1201          MOVE.L  #$00000000,D1           clear D1
00001842  4EB9 0000238E           1202          JSR     IMMEDIATE_DATA_LONG     print immediate data
00001848  4EB9 0000247A           1203          JSR     BUFFER_COMMA            buffer comma
0000184E  4EB9 000022BA           1204          JSR     SOURCE_MOVE             buffer EA
00001854  4EB9 0000248E           1205          JSR     PRINT_VALID_BUFFER      print what's in buffer
0000185A  4EB9 00002480           1206          JSR     PRINT_NEWLINE           print new line
00001860                          1207          
00001860  6000 F950               1208          BRA     START_DISASSEMBLER
00001864                          1209          
00001864                          1210  *******************************************************************
00001864                          1211  *          BCLR                                                   *
00001864                          1212  *******************************************************************
00001864                          1213  BCLR_DN_EA
00001864  3A3C 0038               1214          MOVE.W  #BIT_05_TO_03,D5        bitmask bits 05-03
00001868  CA42                    1215          AND.W   D2,D5                   and with instruction
0000186A  BA7C 0000               1216          CMP.W   #$0000,D5               EA mode is Dn. Long.
0000186E  6700 0006               1217          BEQ     BCLR_DN_EA_L
00001872                          1218          
00001872  6000 004E               1219          BRA     BCLR_DN_EA_B            else is byte
00001876                          1220   
00001876                          1221  BCLR_DN_EA_L
00001876  16FC 0042               1222          MOVE.B  #'B',(A3)+              add BCLR.L to buffer
0000187A  16FC 0043               1223          MOVE.B  #'C',(A3)+
0000187E  16FC 004C               1224          MOVE.B  #'L',(A3)+
00001882  16FC 0052               1225          MOVE.B  #'R',(A3)+
00001886  16FC 002E               1226          MOVE.B  #'.',(A3)+
0000188A  16FC 004C               1227          MOVE.B  #'L',(A3)+
0000188E  16FC 0020               1228          MOVE.B  #' ',(A3)+
00001892  16FC 0020               1229          MOVE.B  #' ',(A3)+
00001896                          1230          
00001896  3C3C 0E00               1231          MOVE.W  #BIT_11_TO_09,D6        bitmask bits 11-09
0000189A  CC42                    1232          AND.W   D2,D6                   and with instruction
0000189C  E04E                    1233          LSR.W   #8,D6                   shift right
0000189E  E24E                    1234          LSR.W   #1,D6                   
000018A0  4EB9 000023A4           1235          JSR     BUFFER_DN               buffer Dn
000018A6  4EB9 0000247A           1236          JSR     BUFFER_COMMA            buffer comma
000018AC  4EB9 000022BA           1237          JSR     SOURCE_MOVE             buffer EA
000018B2                          1238          
000018B2  4EB9 0000248E           1239          JSR     PRINT_VALID_BUFFER      prints
000018B8  4EB9 00002480           1240          JSR     PRINT_NEWLINE           print new line
000018BE                          1241          
000018BE  6000 F8F2               1242          BRA     START_DISASSEMBLER
000018C2                          1243  
000018C2                          1244  BCLR_DN_EA_B
000018C2  16FC 0042               1245          MOVE.B  #'B',(A3)+              add BCLR.L to buffer
000018C6  16FC 0043               1246          MOVE.B  #'C',(A3)+
000018CA  16FC 004C               1247          MOVE.B  #'L',(A3)+
000018CE  16FC 0052               1248          MOVE.B  #'R',(A3)+
000018D2  16FC 002E               1249          MOVE.B  #'.',(A3)+
000018D6  16FC 0042               1250          MOVE.B  #'B',(A3)+
000018DA  16FC 0020               1251          MOVE.B  #' ',(A3)+
000018DE  16FC 0020               1252          MOVE.B  #' ',(A3)+
000018E2                          1253          
000018E2  3C3C 0E00               1254          MOVE.W  #BIT_11_TO_09,D6        bitmask bits 11-09
000018E6  CC42                    1255          AND.W   D2,D6                   and with instruction
000018E8  E04E                    1256          LSR.W   #8,D6                   shift right
000018EA  E24E                    1257          LSR.W   #1,D6                   
000018EC  4EB9 000023A4           1258          JSR     BUFFER_DN               buffer Dn
000018F2  4EB9 0000247A           1259          JSR     BUFFER_COMMA            buffer comma
000018F8  4EB9 000022BA           1260          JSR     SOURCE_MOVE             buffer EA
000018FE                          1261          
000018FE  4EB9 0000248E           1262          JSR     PRINT_VALID_BUFFER      prints
00001904  4EB9 00002480           1263          JSR     PRINT_NEWLINE           print new line
0000190A                          1264          
0000190A  6000 F8A6               1265          BRA     START_DISASSEMBLER
0000190E                          1266          
0000190E                          1267  BCLR_IM_EA
0000190E  16FC 0042               1268          MOVE.B  #'B',(A3)+              add BCLR.L to buffer
00001912  16FC 0043               1269          MOVE.B  #'C',(A3)+
00001916  16FC 004C               1270          MOVE.B  #'L',(A3)+
0000191A  16FC 0052               1271          MOVE.B  #'R',(A3)+
0000191E  16FC 002E               1272          MOVE.B  #'.',(A3)+
00001922  16FC 0042               1273          MOVE.B  #'B',(A3)+
00001926  16FC 0020               1274          MOVE.B  #' ',(A3)+
0000192A  16FC 0020               1275          MOVE.B  #' ',(A3)+
0000192E                          1276          
0000192E  7200                    1277          MOVE.L  #$0000,D1               clear D1
00001930  4EB9 00002378           1278          JSR     IMMEDIATE_DATA_WORD     print immediate data
00001936  4EB9 0000247A           1279          JSR     BUFFER_COMMA            buffer comma
0000193C  4EB9 000022BA           1280          JSR     SOURCE_MOVE             buffer EA
00001942                          1281          
00001942  4EB9 0000248E           1282          JSR     PRINT_VALID_BUFFER      prints
00001948  4EB9 00002480           1283          JSR     PRINT_NEWLINE           print new line
0000194E                          1284          
0000194E  6000 F862               1285          BRA     START_DISASSEMBLER
00001952                          1286  
00001952                          1287  *******************************************************************
00001952                          1288  *          ADD                                                    *
00001952                          1289  *******************************************************************       
00001952                          1290  ADD
00001952  16FC 0041               1291          MOVE.B  #'A',(A3)+
00001956  16FC 0044               1292          MOVE.B  #'D',(A3)+
0000195A  16FC 0044               1293          MOVE.B  #'D',(A3)+
0000195E  16FC 002E               1294          MOVE.B  #'.',(A3)+
00001962                          1295          
00001962  4EB9 00002230           1296          JSR     BUFFER_SIZE
00001968                          1297          
00001968  16FC 0020               1298          MOVE.B  #' ',(A3)+
0000196C  16FC 0020               1299          MOVE.B  #' ',(A3)+
00001970  16FC 0020               1300          MOVE.B  #' ',(A3)+
00001974                          1301          
00001974  6000 0002               1302          BRA     ADD_SUB_DIRECTION
00001978                          1303          
00001978                          1304  ADD_SUB_DIRECTION
00001978  3A3C 0100               1305          MOVE.W  #BIT_08_BITMASK,D5      bitmask dest mode
0000197C  CA42                    1306          AND.W   D2,D5                   and with instruction
0000197E  E04D                    1307          LSR.W   #8,D5                   shift dest mode right
00001980                          1308          
00001980  BA3C 0000               1309          CMP.B   #0,D5                   compare with 000
00001984  6700 0006               1310          BEQ     Dn_TO_EA
00001988                          1311          
00001988  6000 0028               1312          BRA     EA_TO_DN
0000198C                          1313  
0000198C                          1314  Dn_TO_EA
0000198C  4EB9 000022BA           1315          JSR     SOURCE_MOVE
00001992  4EB9 0000247A           1316          JSR     BUFFER_COMMA
00001998  16FC 0044               1317          MOVE.B  #'D',(A3)+
0000199C  4EB9 00002214           1318          JSR     SOURCE_NUM                                                                    
000019A2                          1319          
000019A2  4EB9 0000248E           1320          JSR     PRINT_VALID_BUFFER  prints
000019A8  4EB9 00002480           1321          JSR     PRINT_NEWLINE       print new line
000019AE                          1322          
000019AE  6000 F802               1323          BRA     START_DISASSEMBLER
000019B2                          1324  
000019B2                          1325  
000019B2                          1326  EA_TO_DN
000019B2  16FC 0044               1327          MOVE.B  #'D',(A3)+
000019B6  4EB9 00002214           1328          JSR     SOURCE_NUM
000019BC  4EB9 0000247A           1329          JSR     BUFFER_COMMA
000019C2  4EB9 000022BA           1330          JSR     SOURCE_MOVE                                                                    
000019C8                          1331          
000019C8  4EB9 0000248E           1332          JSR     PRINT_VALID_BUFFER  prints
000019CE  4EB9 00002480           1333          JSR     PRINT_NEWLINE       print new line
000019D4                          1334          
000019D4  6000 F7DC               1335          BRA     START_DISASSEMBLER
000019D8                          1336         
000019D8                          1337  *******************************************************************
000019D8                          1338  *          ADDA                                                   *
000019D8                          1339  *******************************************************************       
000019D8                          1340  ADDA
000019D8  16FC 0041               1341          MOVE.B  #'A',(A3)+
000019DC  16FC 0044               1342          MOVE.B  #'D',(A3)+
000019E0  16FC 0044               1343          MOVE.B  #'D',(A3)+
000019E4  16FC 0041               1344          MOVE.B  #'A',(A3)+
000019E8  16FC 002E               1345          MOVE.B  #'.',(A3)+
000019EC                          1346          
000019EC  4EB9 00002254           1347          JSR     BUFFER_SIZE_WL
000019F2                          1348          
000019F2  16FC 0020               1349          MOVE.B  #' ',(A3)+
000019F6  16FC 0020               1350          MOVE.B  #' ',(A3)+
000019FA                          1351          
000019FA  4EB9 000022BA           1352          JSR     SOURCE_MOVE
00001A00  4EB9 0000247A           1353          JSR     BUFFER_COMMA
00001A06  16FC 0041               1354          MOVE.B  #'A',(A3)+
00001A0A  4EB9 00002214           1355          JSR     SOURCE_NUM                                                      
00001A10                          1356          
00001A10  4EB9 0000248E           1357          JSR     PRINT_VALID_BUFFER  prints
00001A16  4EB9 00002480           1358          JSR     PRINT_NEWLINE       print new line
00001A1C                          1359          
00001A1C  6000 F794               1360          BRA     START_DISASSEMBLER
00001A20                          1361          
00001A20                          1362  *******************************************************************
00001A20                          1363  *          CMP                                                    *
00001A20                          1364  *******************************************************************        
00001A20                          1365  CMP
00001A20  16FC 0043               1366          MOVE.B  #'C',(A3)+
00001A24  16FC 004D               1367          MOVE.B  #'M',(A3)+
00001A28  16FC 0050               1368          MOVE.B  #'P',(A3)+
00001A2C  16FC 002E               1369          MOVE.B  #'.',(A3)+
00001A30                          1370          
00001A30  4EB9 00002230           1371          JSR     BUFFER_SIZE
00001A36                          1372          
00001A36  16FC 0020               1373          MOVE.B  #' ',(A3)+
00001A3A  16FC 0020               1374          MOVE.B  #' ',(A3)+
00001A3E  16FC 0020               1375          MOVE.B  #' ',(A3)+
00001A42                          1376          
00001A42  4EB9 000022BA           1377          JSR     SOURCE_MOVE
00001A48  4EB9 0000247A           1378          JSR     BUFFER_COMMA
00001A4E  16FC 0044               1379          MOVE.B  #'D',(A3)+
00001A52  4EB9 00002224           1380          JSR     DESTINATION_NUM
00001A58                          1381          
00001A58  4EB9 0000248E           1382          JSR     PRINT_VALID_BUFFER  prints
00001A5E  4EB9 00002480           1383          JSR     PRINT_NEWLINE       print new line
00001A64                          1384          
00001A64  6000 F74C               1385          BRA     START_DISASSEMBLER
00001A68                          1386          
00001A68                          1387  *******************************************************************
00001A68                          1388  *          EOR                                                    *
00001A68                          1389  *******************************************************************        
00001A68                          1390  EOR
00001A68  16FC 0045               1391          MOVE.B  #'E',(A3)+
00001A6C  16FC 004F               1392          MOVE.B  #'O',(A3)+
00001A70  16FC 0052               1393          MOVE.B  #'R',(A3)+
00001A74  16FC 002E               1394          MOVE.B  #'.',(A3)+
00001A78                          1395          
00001A78  4EB9 00002230           1396          JSR     BUFFER_SIZE
00001A7E                          1397          
00001A7E  16FC 0020               1398          MOVE.B  #' ',(A3)+
00001A82  16FC 0020               1399          MOVE.B  #' ',(A3)+
00001A86  16FC 0020               1400          MOVE.B  #' ',(A3)+
00001A8A                          1401          
00001A8A  16FC 0044               1402          MOVE.B  #'D',(A3)+
00001A8E  4EB9 00002214           1403          JSR     SOURCE_NUM
00001A94  4EB9 0000247A           1404          JSR     BUFFER_COMMA
00001A9A  4EB9 000022BA           1405          JSR     SOURCE_MOVE
00001AA0                          1406          
00001AA0  4EB9 0000248E           1407          JSR     PRINT_VALID_BUFFER  prints
00001AA6  4EB9 00002480           1408          JSR     PRINT_NEWLINE       print new line
00001AAC                          1409          
00001AAC  6000 F704               1410          BRA     START_DISASSEMBLER
00001AB0                          1411  
00001AB0                          1412  *******************************************************************
00001AB0                          1413  *          MOVE.B                                                 *
00001AB0                          1414  *******************************************************************
00001AB0                          1415  MOVEB
00001AB0  16FC 004D               1416          MOVE.B  #'M',(A3)+          add MOVE.B to buffer
00001AB4  16FC 004F               1417          MOVE.B  #'O',(A3)+
00001AB8  16FC 0056               1418          MOVE.B  #'V',(A3)+
00001ABC  16FC 0045               1419          MOVE.B  #'E',(A3)+
00001AC0  16FC 002E               1420          MOVE.B  #'.',(A3)+
00001AC4  16FC 0042               1421          MOVE.B  #'B',(A3)+
00001AC8  16FC 0020               1422          MOVE.B  #' ',(A3)+
00001ACC  16FC 0020               1423          MOVE.B  #' ',(A3)+
00001AD0                          1424          
00001AD0  4EB9 000022BA           1425          JSR     SOURCE_MOVE         buffer source EA
00001AD6  4EB9 0000247A           1426          JSR     BUFFER_COMMA        buffer comma
00001ADC  4EB9 000022D4           1427          JSR     DESTINATION_MOVE    buffer destination EA
00001AE2                          1428          
00001AE2  4EB9 0000248E           1429          JSR     PRINT_VALID_BUFFER  prints
00001AE8  4EB9 00002480           1430          JSR     PRINT_NEWLINE       print new line
00001AEE                          1431          
00001AEE  6000 F6C2               1432          BRA     START_DISASSEMBLER
00001AF2                          1433          
00001AF2                          1434  *******************************************************************
00001AF2                          1435  *          MOVE.L                                                 *
00001AF2                          1436  *******************************************************************
00001AF2                          1437  MOVEL
00001AF2  16FC 004D               1438          MOVE.B  #'M',(A3)+          add MOVE.L to buffer
00001AF6  16FC 004F               1439          MOVE.B  #'O',(A3)+
00001AFA  16FC 0056               1440          MOVE.B  #'V',(A3)+
00001AFE  16FC 0045               1441          MOVE.B  #'E',(A3)+
00001B02  16FC 002E               1442          MOVE.B  #'.',(A3)+
00001B06  16FC 004C               1443          MOVE.B  #'L',(A3)+
00001B0A  16FC 0020               1444          MOVE.B  #' ',(A3)+
00001B0E  16FC 0020               1445          MOVE.B  #' ',(A3)+
00001B12                          1446          
00001B12  4EB9 000022BA           1447          JSR     SOURCE_MOVE         buffer source EA
00001B18  4EB9 0000247A           1448          JSR     BUFFER_COMMA        buffer comma
00001B1E  4EB9 000022D4           1449          JSR     DESTINATION_MOVE    buffer destination EA
00001B24                          1450          
00001B24  4EB9 0000248E           1451          JSR     PRINT_VALID_BUFFER  prints
00001B2A  4EB9 00002480           1452          JSR     PRINT_NEWLINE       print new line
00001B30                          1453          
00001B30  6000 F680               1454          BRA     START_DISASSEMBLER
00001B34                          1455  
00001B34                          1456  *******************************************************************
00001B34                          1457  *          MOVEA.L                                                *
00001B34                          1458  *******************************************************************
00001B34                          1459  MOVEAL
00001B34  16FC 004D               1460          MOVE.B  #'M',(A3)+          add MOVEA.L to buffer
00001B38  16FC 004F               1461          MOVE.B  #'O',(A3)+
00001B3C  16FC 0056               1462          MOVE.B  #'V',(A3)+
00001B40  16FC 0045               1463          MOVE.B  #'E',(A3)+
00001B44  16FC 0041               1464          MOVE.B  #'A',(A3)+
00001B48  16FC 002E               1465          MOVE.B  #'.',(A3)+
00001B4C  16FC 004C               1466          MOVE.B  #'L',(A3)+
00001B50  16FC 0020               1467          MOVE.B  #' ',(A3)+
00001B54  16FC 0020               1468          MOVE.B  #' ',(A3)+
00001B58                          1469          
00001B58  4EB9 000022BA           1470          JSR     SOURCE_MOVE         buffer source EA
00001B5E  4EB9 0000247A           1471          JSR     BUFFER_COMMA        buffer comma
00001B64  4EB9 000022D4           1472          JSR     DESTINATION_MOVE    buffer destination EA
00001B6A                          1473          
00001B6A  4EB9 0000248E           1474          JSR     PRINT_VALID_BUFFER  prints
00001B70  4EB9 00002480           1475          JSR     PRINT_NEWLINE       print new line
00001B76                          1476          
00001B76  6000 F63A               1477          BRA     START_DISASSEMBLER
00001B7A                          1478          
00001B7A                          1479  *******************************************************************
00001B7A                          1480  *          MOVE.W                                                 *
00001B7A                          1481  *******************************************************************
00001B7A                          1482  MOVEW
00001B7A  16FC 004D               1483          MOVE.B  #'M',(A3)+          add MOVE.L to buffer
00001B7E  16FC 004F               1484          MOVE.B  #'O',(A3)+
00001B82  16FC 0056               1485          MOVE.B  #'V',(A3)+
00001B86  16FC 0045               1486          MOVE.B  #'E',(A3)+
00001B8A  16FC 002E               1487          MOVE.B  #'.',(A3)+
00001B8E  16FC 0057               1488          MOVE.B  #'W',(A3)+
00001B92  16FC 0020               1489          MOVE.B  #' ',(A3)+
00001B96  16FC 0020               1490          MOVE.B  #' ',(A3)+
00001B9A                          1491          
00001B9A  4EB9 000022BA           1492          JSR     SOURCE_MOVE         buffer source EA
00001BA0  4EB9 0000247A           1493          JSR     BUFFER_COMMA        buffer comma
00001BA6  4EB9 000022D4           1494          JSR     DESTINATION_MOVE    buffer destination EA
00001BAC                          1495          
00001BAC  4EB9 0000248E           1496          JSR     PRINT_VALID_BUFFER  prints
00001BB2  4EB9 00002480           1497          JSR     PRINT_NEWLINE       print new line
00001BB8                          1498          
00001BB8  6000 F5F8               1499          BRA     START_DISASSEMBLER
00001BBC                          1500  
00001BBC                          1501  *******************************************************************
00001BBC                          1502  *          MOVEA.W                                                *
00001BBC                          1503  *******************************************************************
00001BBC                          1504  MOVEAW
00001BBC  16FC 004D               1505          MOVE.B  #'M',(A3)+          add MOVEA.L to buffer
00001BC0  16FC 004F               1506          MOVE.B  #'O',(A3)+
00001BC4  16FC 0056               1507          MOVE.B  #'V',(A3)+
00001BC8  16FC 0045               1508          MOVE.B  #'E',(A3)+
00001BCC  16FC 0041               1509          MOVE.B  #'A',(A3)+
00001BD0  16FC 002E               1510          MOVE.B  #'.',(A3)+
00001BD4  16FC 0057               1511          MOVE.B  #'W',(A3)+
00001BD8  16FC 0020               1512          MOVE.B  #' ',(A3)+
00001BDC  16FC 0020               1513          MOVE.B  #' ',(A3)+
00001BE0                          1514          
00001BE0  4EB9 000022BA           1515          JSR     SOURCE_MOVE         buffer source EA
00001BE6  4EB9 0000247A           1516          JSR     BUFFER_COMMA        buffer comma
00001BEC  4EB9 000022D4           1517          JSR     DESTINATION_MOVE    buffer destination EA
00001BF2                          1518          
00001BF2  4EB9 0000248E           1519          JSR     PRINT_VALID_BUFFER  prints
00001BF8  4EB9 00002480           1520          JSR     PRINT_NEWLINE       print new line
00001BFE                          1521          
00001BFE  6000 F5B2               1522          BRA     START_DISASSEMBLER
00001C02                          1523  
00001C02                          1524  *******************************************************************
00001C02                          1525  *          MOVEM                                                  *
00001C02                          1526  *******************************************************************
00001C02                          1527  *MOVEM
00001C02                          1528  *        MOVE.B  #'M',(A3)+          add MOVEM to buffer
00001C02                          1529  *        MOVE.B  #'O',(A3)+
00001C02                          1530  *        MOVE.B  #'V',(A3)+
00001C02                          1531  *        MOVE.B  #'E',(A3)+
00001C02                          1532  *        MOVE.B  #'M',(A3)+
00001C02                          1533  *        MOVE.B  #'.',(A3)+
00001C02                          1534  *        
00001C02                          1535  *        JSR     MOVEM_WORD_LONG     figure out word or long
00001C02                          1536  *        
00001C02                          1537  *        MOVE.B  #' ',(A3)+
00001C02                          1538  *        MOVE.B  #' ',(A3)+
00001C02                          1539  *        
00001C02                          1540  *        MOVE.W  #BIT_10_BITMASK,D5  bitmask bit 10
00001C02                          1541  *        AND.W   D2,D5               and with instruction
00001C02                          1542  *        CMP.W   #$0000,D5           
00001C02                          1543  *        BEQ     MOVEM_REG_MEM       register to memory
00001C02                          1544  *        BRA     MOVEM_MEM_REG       memory to register
00001C02                          1545  *
00001C02                          1546  *MOVEM_WORD_LONG
00001C02                          1547  *        MOVE.W  #BIT_06_BITMASK,D5  bitmask bit 06
00001C02                          1548  *        AND.W   D2,D5               and with instruction
00001C02                          1549  *        CMP.W   #$0000,D5           
00001C02                          1550  *        BEQ     BUFFER_W            word
00001C02                          1551  *        BRA     BUFFER_L            long
00001C02                          1552  *
00001C02                          1553  *MOVEM_REG_MEM
00001C02                          1554  *        JSR     BUFFER_LIST
00001C02                          1555  *
00001C02                          1556  *MOVEM_MEM_REG
00001C02                          1557  *
00001C02                          1558  *BUFFER_LIST
00001C02                          1559  *        MOVE.W  (A5)+,D3        move the data from A5 to D3
00001C02                          1560  *        MOVE.W  D3,D2
00001C02                          1561  *        
00001C02                          1562  *        MOVE.B  #0,D1           counter
00001C02                          1563  *        BRA     DLIST
00001C02                          1564  *        
00001C02                          1565  *DLIST
00001C02                          1566  *        CMP.B   #8,D1           compare with counter
00001C02                          1567  *        BEQ     ALIST           done with Dn
00001C02                          1568          
00001C02                          1569          
00001C02                          1570          
00001C02                          1571          
00001C02                          1572  *******************************************************************
00001C02                          1573  *          NEG.B                                                  *
00001C02                          1574  *******************************************************************
00001C02                          1575  NEGB
00001C02  16FC 004E               1576          MOVE.B  #'N',(A3)+          add NEG.B to buffer
00001C06  16FC 0045               1577          MOVE.B  #'E',(A3)+
00001C0A  16FC 0047               1578          MOVE.B  #'G',(A3)+
00001C0E  16FC 002E               1579          MOVE.B  #'.',(A3)+
00001C12  16FC 0042               1580          MOVE.B  #'B',(A3)+
00001C16  16FC 0020               1581          MOVE.B  #' ',(A3)+
00001C1A  16FC 0020               1582          MOVE.B  #' ',(A3)+
00001C1E                          1583          
00001C1E  4EB9 000022BA           1584          JSR     SOURCE_MOVE         buffer EA
00001C24                          1585          
00001C24  4EB9 0000248E           1586          JSR     PRINT_VALID_BUFFER  prints
00001C2A  4EB9 00002480           1587          JSR     PRINT_NEWLINE       print new line
00001C30                          1588          
00001C30  6000 F580               1589          BRA     START_DISASSEMBLER
00001C34                          1590  
00001C34                          1591  *******************************************************************
00001C34                          1592  *          NEG.W                                                  *
00001C34                          1593  *******************************************************************
00001C34                          1594  NEGW
00001C34  16FC 004E               1595          MOVE.B  #'N',(A3)+          add NEG.W to buffer
00001C38  16FC 0045               1596          MOVE.B  #'E',(A3)+
00001C3C  16FC 0047               1597          MOVE.B  #'G',(A3)+
00001C40  16FC 002E               1598          MOVE.B  #'.',(A3)+
00001C44  16FC 0057               1599          MOVE.B  #'W',(A3)+
00001C48  16FC 0020               1600          MOVE.B  #' ',(A3)+
00001C4C  16FC 0020               1601          MOVE.B  #' ',(A3)+
00001C50                          1602          
00001C50  4EB9 000022BA           1603          JSR     SOURCE_MOVE         buffer EA
00001C56                          1604          
00001C56  4EB9 0000248E           1605          JSR     PRINT_VALID_BUFFER  prints
00001C5C  4EB9 00002480           1606          JSR     PRINT_NEWLINE       print new line
00001C62                          1607          
00001C62  6000 F54E               1608          BRA     START_DISASSEMBLER
00001C66                          1609          
00001C66                          1610  *******************************************************************
00001C66                          1611  *          NEG.L                                                  *
00001C66                          1612  *******************************************************************
00001C66                          1613  NEGL
00001C66  16FC 004E               1614          MOVE.B  #'N',(A3)+          add NEG.L to buffer
00001C6A  16FC 0045               1615          MOVE.B  #'E',(A3)+
00001C6E  16FC 0047               1616          MOVE.B  #'G',(A3)+
00001C72  16FC 002E               1617          MOVE.B  #'.',(A3)+
00001C76  16FC 004C               1618          MOVE.B  #'L',(A3)+
00001C7A  16FC 0020               1619          MOVE.B  #' ',(A3)+
00001C7E  16FC 0020               1620          MOVE.B  #' ',(A3)+
00001C82                          1621          
00001C82  4EB9 000022BA           1622          JSR     SOURCE_MOVE         buffer EA
00001C88                          1623          
00001C88  4EB9 0000248E           1624          JSR     PRINT_VALID_BUFFER  prints
00001C8E  4EB9 00002480           1625          JSR     PRINT_NEWLINE       print new line
00001C94                          1626          
00001C94  6000 F51C               1627          BRA     START_DISASSEMBLER
00001C98                          1628          
00001C98                          1629  *******************************************************************
00001C98                          1630  *          RTS                                                    *
00001C98                          1631  *******************************************************************   
00001C98                          1632  RTS
00001C98  16FC 0052               1633          MOVE.B  #'R',(A3)+          add RTS to buffer
00001C9C  16FC 0054               1634          MOVE.B  #'T',(A3)+
00001CA0  16FC 0053               1635          MOVE.B  #'S',(A3)+
00001CA4                          1636          
00001CA4  4EB9 0000248E           1637          JSR     PRINT_VALID_BUFFER  prints
00001CAA  4EB9 00002480           1638          JSR     PRINT_NEWLINE       print new line
00001CB0                          1639  
00001CB0  6000 F500               1640          BRA     START_DISASSEMBLER
00001CB4                          1641          
00001CB4                          1642  *******************************************************************
00001CB4                          1643  *          JSR                                                    *
00001CB4                          1644  *******************************************************************
00001CB4                          1645  JSR
00001CB4  16FC 004A               1646          MOVE.B  #'J',(A3)+          add JSR to buffer
00001CB8  16FC 0053               1647          MOVE.B  #'S',(A3)+
00001CBC  16FC 0052               1648          MOVE.B  #'R',(A3)+
00001CC0  16FC 0020               1649          MOVE.B  #' ',(A3)+
00001CC4  16FC 0020               1650          MOVE.B  #' ',(A3)+
00001CC8                          1651          
00001CC8  4EB9 000022BA           1652          JSR     SOURCE_MOVE         buffer EA
00001CCE                          1653          
00001CCE  4EB9 0000248E           1654          JSR     PRINT_VALID_BUFFER  prints
00001CD4  4EB9 00002480           1655          JSR     PRINT_NEWLINE       print new line
00001CDA                          1656          
00001CDA  6000 F4D6               1657          BRA     START_DISASSEMBLER
00001CDE                          1658          
00001CDE                          1659  *******************************************************************
00001CDE                          1660  *          LEA                                                    *
00001CDE                          1661  *******************************************************************
00001CDE                          1662  LEA
00001CDE  16FC 004C               1663          MOVE.B  #'L',(A3)+          add JSR to buffer
00001CE2  16FC 0045               1664          MOVE.B  #'E',(A3)+
00001CE6  16FC 0041               1665          MOVE.B  #'A',(A3)+
00001CEA  16FC 0020               1666          MOVE.B  #' ',(A3)+
00001CEE  16FC 0020               1667          MOVE.B  #' ',(A3)+
00001CF2                          1668          
00001CF2  4EB9 000022BA           1669          JSR     SOURCE_MOVE         buffer EA
00001CF8  4EB9 0000247A           1670          JSR     BUFFER_COMMA        prints comma
00001CFE                          1671          
00001CFE  3A3C 0E00               1672          MOVE.W  #BIT_11_TO_09,D5    bitmask bits 11-09
00001D02  CA42                    1673          AND.W   D2,D5               and with instruction
00001D04  E04D                    1674          LSR.W   #8,D5               shift right
00001D06  E24D                    1675          LSR.W   #1,D5
00001D08  1C05                    1676          MOVE.B  D5,D6               move the data in D5 to D6
00001D0A  4EB9 000023AC           1677          JSR     BUFFER_AN           buffer An
00001D10                          1678          
00001D10  4EB9 0000248E           1679          JSR     PRINT_VALID_BUFFER  prints
00001D16  4EB9 00002480           1680          JSR     PRINT_NEWLINE       print new line
00001D1C                          1681          
00001D1C  6000 F494               1682          BRA     START_DISASSEMBLER
00001D20                          1683          
00001D20                          1684  *******************************************************************
00001D20                          1685  *          BRA                                                    *
00001D20                          1686  *******************************************************************
00001D20                          1687  BRA
00001D20  16FC 0042               1688          MOVE.B  #'B',(A3)+              add BRA to buffer
00001D24  16FC 0052               1689          MOVE.B  #'R',(A3)+
00001D28  16FC 0041               1690          MOVE.B  #'A',(A3)+
00001D2C  16FC 0020               1691          MOVE.B  #' ',(A3)+
00001D30  16FC 0020               1692          MOVE.B  #' ',(A3)+
00001D34                          1693          
00001D34  4EB9 0000248E           1694          JSR     PRINT_VALID_BUFFER      prints
00001D3A                          1695          
00001D3A  3A3C 00FF               1696          MOVE.W  #BIT_07_TO_00,D5        bitmask bits 07-00
00001D3E  CA42                    1697          AND.W   D2,D5                   and with instruction
00001D40                          1698          
00001D40  BA3C 0000               1699          CMP.B   #$00,D5                 compare with $00
00001D44  6700 053E               1700          BEQ     DISPLACE_16             16 bit displacement
00001D48                          1701          
00001D48  BA3C 00FF               1702          CMP.B   #$FF,D5                 compare with $FF
00001D4C  6700 0552               1703          BEQ     DISPLACE_32             32 bit displacement
00001D50                          1704          
00001D50  6000 051A               1705          BRA     DISPLACE_8              8 bit displacement
00001D54                          1706  
00001D54                          1707  *******************************************************************
00001D54                          1708  *          BCC                                                    *
00001D54                          1709  *******************************************************************
00001D54                          1710  BCC
00001D54  16FC 0042               1711          MOVE.B  #'B',(A3)+              add BCC to buffer
00001D58  16FC 0043               1712          MOVE.B  #'C',(A3)+
00001D5C  16FC 0043               1713          MOVE.B  #'C',(A3)+
00001D60  16FC 0020               1714          MOVE.B  #' ',(A3)+
00001D64  16FC 0020               1715          MOVE.B  #' ',(A3)+
00001D68                          1716          
00001D68  4EB9 0000248E           1717          JSR     PRINT_VALID_BUFFER      prints
00001D6E                          1718          
00001D6E  3A3C 00FF               1719          MOVE.W  #BIT_07_TO_00,D5        bitmask bits 07-00
00001D72  CA42                    1720          AND.W   D2,D5                   and with instruction
00001D74                          1721          
00001D74  BA3C 0000               1722          CMP.B   #$00,D5                 compare with $00
00001D78  6700 050A               1723          BEQ     DISPLACE_16             16 bit displacement
00001D7C                          1724          
00001D7C  BA3C 00FF               1725          CMP.B   #$FF,D5                 compare with $FF
00001D80  6700 051E               1726          BEQ     DISPLACE_32             32 bit displacement
00001D84                          1727          
00001D84  6000 04E6               1728          BRA     DISPLACE_8              8 bit displacement
00001D88                          1729          
00001D88                          1730  *******************************************************************
00001D88                          1731  *          BCS                                                    *
00001D88                          1732  *******************************************************************
00001D88                          1733  BCS
00001D88  16FC 0042               1734          MOVE.B  #'B',(A3)+              add BCS to buffer
00001D8C  16FC 0043               1735          MOVE.B  #'C',(A3)+
00001D90  16FC 0053               1736          MOVE.B  #'S',(A3)+
00001D94  16FC 0020               1737          MOVE.B  #' ',(A3)+
00001D98  16FC 0020               1738          MOVE.B  #' ',(A3)+
00001D9C                          1739          
00001D9C  4EB9 0000248E           1740          JSR     PRINT_VALID_BUFFER      prints
00001DA2                          1741          
00001DA2  3A3C 00FF               1742          MOVE.W  #BIT_07_TO_00,D5        bitmask bits 07-00
00001DA6  CA42                    1743          AND.W   D2,D5                   and with instruction
00001DA8                          1744          
00001DA8  BA3C 0000               1745          CMP.B   #$00,D5                 compare with $00
00001DAC  6700 04D6               1746          BEQ     DISPLACE_16             16 bit displacement
00001DB0                          1747          
00001DB0  BA3C 00FF               1748          CMP.B   #$FF,D5                 compare with $FF
00001DB4  6700 04EA               1749          BEQ     DISPLACE_32             32 bit displacement
00001DB8                          1750          
00001DB8  6000 04B2               1751          BRA     DISPLACE_8              8 bit displacement        
00001DBC                          1752  
00001DBC                          1753  *******************************************************************
00001DBC                          1754  *          BGE                                                    *
00001DBC                          1755  *******************************************************************
00001DBC                          1756  BGE
00001DBC  16FC 0042               1757          MOVE.B  #'B',(A3)+              add BGE to buffer
00001DC0  16FC 0047               1758          MOVE.B  #'G',(A3)+
00001DC4  16FC 0045               1759          MOVE.B  #'E',(A3)+
00001DC8  16FC 0020               1760          MOVE.B  #' ',(A3)+
00001DCC  16FC 0020               1761          MOVE.B  #' ',(A3)+
00001DD0                          1762          
00001DD0  4EB9 0000248E           1763          JSR     PRINT_VALID_BUFFER      prints
00001DD6                          1764          
00001DD6  3A3C 00FF               1765          MOVE.W  #BIT_07_TO_00,D5        bitmask bits 07-00
00001DDA  CA42                    1766          AND.W   D2,D5                   and with instruction
00001DDC                          1767          
00001DDC  BA3C 0000               1768          CMP.B   #$00,D5                 compare with $00
00001DE0  6700 04A2               1769          BEQ     DISPLACE_16             16 bit displacement
00001DE4                          1770          
00001DE4  BA3C 00FF               1771          CMP.B   #$FF,D5                 compare with $FF
00001DE8  6700 04B6               1772          BEQ     DISPLACE_32             32 bit displacement
00001DEC                          1773          
00001DEC  6000 047E               1774          BRA     DISPLACE_8              8 bit displacement
00001DF0                          1775  
00001DF0                          1776  *******************************************************************
00001DF0                          1777  *          BLT                                                    *
00001DF0                          1778  *******************************************************************
00001DF0                          1779  BLT
00001DF0  16FC 0042               1780          MOVE.B  #'B',(A3)+              add BLT to buffer
00001DF4  16FC 004C               1781          MOVE.B  #'L',(A3)+
00001DF8  16FC 0054               1782          MOVE.B  #'T',(A3)+
00001DFC  16FC 0020               1783          MOVE.B  #' ',(A3)+
00001E00  16FC 0020               1784          MOVE.B  #' ',(A3)+
00001E04                          1785          
00001E04  4EB9 0000248E           1786          JSR     PRINT_VALID_BUFFER      prints
00001E0A                          1787          
00001E0A  3A3C 00FF               1788          MOVE.W  #BIT_07_TO_00,D5        bitmask bits 07-00
00001E0E  CA42                    1789          AND.W   D2,D5                   and with instruction
00001E10                          1790          
00001E10  BA3C 0000               1791          CMP.B   #$00,D5                 compare with $00
00001E14  6700 046E               1792          BEQ     DISPLACE_16             16 bit displacement
00001E18                          1793          
00001E18  BA3C 00FF               1794          CMP.B   #$FF,D5                 compare with $FF
00001E1C  6700 0482               1795          BEQ     DISPLACE_32             32 bit displacement
00001E20                          1796          
00001E20  6000 044A               1797          BRA     DISPLACE_8              8 bit displacement
00001E24                          1798  
00001E24                          1799  *******************************************************************
00001E24                          1800  *          BVC                                                    *
00001E24                          1801  *******************************************************************
00001E24                          1802  BVC
00001E24  16FC 0042               1803          MOVE.B  #'B',(A3)+              add BVC to buffer
00001E28  16FC 0056               1804          MOVE.B  #'V',(A3)+
00001E2C  16FC 0043               1805          MOVE.B  #'C',(A3)+
00001E30  16FC 0020               1806          MOVE.B  #' ',(A3)+
00001E34  16FC 0020               1807          MOVE.B  #' ',(A3)+
00001E38                          1808          
00001E38  4EB9 0000248E           1809          JSR     PRINT_VALID_BUFFER      prints
00001E3E                          1810          
00001E3E  3A3C 00FF               1811          MOVE.W  #BIT_07_TO_00,D5        bitmask bits 07-00
00001E42  CA42                    1812          AND.W   D2,D5                   and with instruction
00001E44                          1813          
00001E44  BA3C 0000               1814          CMP.B   #$00,D5                 compare with $00
00001E48  6700 043A               1815          BEQ     DISPLACE_16             16 bit displacement
00001E4C                          1816          
00001E4C  BA3C 00FF               1817          CMP.B   #$FF,D5                 compare with $FF
00001E50  6700 044E               1818          BEQ     DISPLACE_32             32 bit displacement
00001E54                          1819          
00001E54  6000 0416               1820          BRA     DISPLACE_8              8 bit displacement
00001E58                          1821  
00001E58                          1822  *******************************************************************
00001E58                          1823  *          DIVS                                                   *
00001E58                          1824  *******************************************************************
00001E58                          1825  DIVS
00001E58  16FC 0044               1826          MOVE.B  #'D',(A3)+              add DIVS to buffer
00001E5C  16FC 0049               1827          MOVE.B  #'I',(A3)+
00001E60  16FC 0056               1828          MOVE.B  #'V',(A3)+
00001E64  16FC 0053               1829          MOVE.B  #'S',(A3)+
00001E68  16FC 002E               1830          MOVE.B  #'.',(A3)+
00001E6C  16FC 0057               1831          MOVE.B  #'W',(A3)+
00001E70  16FC 0020               1832          MOVE.B  #' ',(A3)+
00001E74  16FC 0020               1833          MOVE.B  #' ',(A3)+
00001E78                          1834          
00001E78  7200                    1835          MOVE.L  #$00000000,D1
00001E7A  4EB9 000022BA           1836          JSR     SOURCE_MOVE             buffer EA
00001E80  4EB9 0000247A           1837          JSR     BUFFER_COMMA            prints comma
00001E86                          1838          
00001E86  3A3C 0E00               1839          MOVE.W  #BIT_11_TO_09,D5        bitmask bits 11-09
00001E8A  CA42                    1840          AND.W   D2,D5                   and with instruction
00001E8C  E04D                    1841          LSR.W   #8,D5                   shift right
00001E8E  E24D                    1842          LSR.W   #1,D5
00001E90  1C05                    1843          MOVE.B  D5,D6                   move the data in D5 to D6
00001E92  4EB9 000023A4           1844          JSR     BUFFER_DN               buffer Dn
00001E98                          1845          
00001E98  4EB9 0000248E           1846          JSR     PRINT_VALID_BUFFER      prints
00001E9E  4EB9 00002480           1847          JSR     PRINT_NEWLINE           print new line
00001EA4                          1848          
00001EA4  6000 F30C               1849          BRA     START_DISASSEMBLER
00001EA8                          1850  
00001EA8                          1851  *******************************************************************
00001EA8                          1852  *          OR                                                     *
00001EA8                          1853  *******************************************************************
00001EA8                          1854  OR
00001EA8  3A3C 0100               1855          MOVE.W  #BIT_08_BITMASK,D5      bitmask bit 08
00001EAC  CA42                    1856          AND.W   D2,D5                   and with instruction
00001EAE  BA7C 0000               1857          CMP.W   #$0000,D5               register to memory
00001EB2  6700 0006               1858          BEQ     OR_REG_TO_MEM
00001EB6                          1859  
00001EB6  6000 00B6               1860          BRA     OR_MEM_TO_REG
00001EBA                          1861  
00001EBA                          1862  OR_REG_TO_MEM
00001EBA  3A3C 01C0               1863          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001EBE  CA42                    1864          AND.W   D2,D5                   and with instruction
00001EC0  BA7C 0000               1865          CMP.W   #$0000,D5               byte
00001EC4  6700 0022               1866          BEQ     OR_REG_TO_MEM_B
00001EC8                          1867  
00001EC8  3A3C 01C0               1868          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001ECC  CA42                    1869          AND.W   D2,D5                   and with instruction
00001ECE  BA7C 0040               1870          CMP.W   #$0040,D5               word
00001ED2  6700 0032               1871          BEQ     OR_REG_TO_MEM_W
00001ED6                          1872  
00001ED6  3A3C 01C0               1873          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001EDA  CA42                    1874          AND.W   D2,D5                   and with instruction
00001EDC  BA7C 0080               1875          CMP.W   #$0080,D5               long
00001EE0  6700 0042               1876          BEQ     OR_REG_TO_MEM_L         
00001EE4                          1877          
00001EE4  6000 05CE               1878          BRA     INVALID_DATA
00001EE8                          1879          
00001EE8                          1880  OR_REG_TO_MEM_B
00001EE8  16FC 004F               1881          MOVE.B  #'O',(A3)+              add OR.B to buffer
00001EEC  16FC 0052               1882          MOVE.B  #'R',(A3)+
00001EF0  16FC 002E               1883          MOVE.B  #'.',(A3)+
00001EF4  16FC 0042               1884          MOVE.B  #'B',(A3)+
00001EF8  16FC 0020               1885          MOVE.B  #' ',(A3)+
00001EFC  16FC 0020               1886          MOVE.B  #' ',(A3)+
00001F00                          1887          
00001F00  7200                    1888          MOVE.L  #$00000000,D1           clear D1 to check immediate word
00001F02  6000 003E               1889          BRA     OR_REG_TO_MEM_EA_DN     buffer the rest
00001F06                          1890  
00001F06                          1891  OR_REG_TO_MEM_W
00001F06  16FC 004F               1892          MOVE.B  #'O',(A3)+              add OR.W to buffer
00001F0A  16FC 0052               1893          MOVE.B  #'R',(A3)+
00001F0E  16FC 002E               1894          MOVE.B  #'.',(A3)+
00001F12  16FC 0057               1895          MOVE.B  #'W',(A3)+
00001F16  16FC 0020               1896          MOVE.B  #' ',(A3)+
00001F1A  16FC 0020               1897          MOVE.B  #' ',(A3)+
00001F1E                          1898          
00001F1E  7200                    1899          MOVE.L  #$00000000,D1           clear D1 to check immediate word
00001F20  6000 0020               1900          BRA     OR_REG_TO_MEM_EA_DN     buffer the rest
00001F24                          1901          
00001F24                          1902  OR_REG_TO_MEM_L
00001F24  16FC 004F               1903          MOVE.B  #'O',(A3)+              add OR.L to buffer
00001F28  16FC 0052               1904          MOVE.B  #'R',(A3)+
00001F2C  16FC 002E               1905          MOVE.B  #'.',(A3)+
00001F30  16FC 004C               1906          MOVE.B  #'L',(A3)+
00001F34  16FC 0020               1907          MOVE.B  #' ',(A3)+
00001F38  16FC 0020               1908          MOVE.B  #' ',(A3)+
00001F3C                          1909          
00001F3C  7201                    1910          MOVE.L  #$00000001,D1           clear D1 to check immediate long
00001F3E  6000 0002               1911          BRA     OR_REG_TO_MEM_EA_DN     buffer the rest
00001F42                          1912          
00001F42                          1913  OR_REG_TO_MEM_EA_DN
00001F42  4EB9 000022BA           1914          JSR     SOURCE_MOVE             buffer source EA
00001F48  4EB9 0000247A           1915          JSR     BUFFER_COMMA            buffer comma
00001F4E                          1916          
00001F4E  3C3C 0E00               1917          MOVE.W  #BIT_11_TO_09,D6        bitmask bits 11-09
00001F52  CC42                    1918          AND.W   D2,D6                   and with instruction
00001F54  E04E                    1919          LSR.W   #8,D6                   shift to the right
00001F56  E24E                    1920          LSR.W   #1,D6               
00001F58  4EB9 000023A4           1921          JSR     BUFFER_DN               buffer destination EA
00001F5E                          1922          
00001F5E  4EB9 0000248E           1923          JSR     PRINT_VALID_BUFFER      prints
00001F64  4EB9 00002480           1924          JSR     PRINT_NEWLINE           print new line
00001F6A                          1925          
00001F6A  6000 F246               1926          BRA     START_DISASSEMBLER
00001F6E                          1927          
00001F6E                          1928  OR_MEM_TO_REG
00001F6E  3A3C 01C0               1929          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001F72  CA42                    1930          AND.W   D2,D5                   and with instruction
00001F74  BA7C 0100               1931          CMP.W   #$0100,D5               byte
00001F78  6700 0022               1932          BEQ     OR_MEM_TO_REG_B
00001F7C                          1933  
00001F7C  3A3C 01C0               1934          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001F80  CA42                    1935          AND.W   D2,D5                   and with instruction
00001F82  BA7C 0140               1936          CMP.W   #$0140,D5               word
00001F86  6700 0030               1937          BEQ     OR_MEM_TO_REG_W
00001F8A                          1938  
00001F8A  3A3C 01C0               1939          MOVE.W  #BIT_08_TO_06,D5        bitmask bits 08-06
00001F8E  CA42                    1940          AND.W   D2,D5                   and with instruction
00001F90  BA7C 0180               1941          CMP.W   #$0180,D5               long
00001F94  6700 003E               1942          BEQ     OR_MEM_TO_REG_L         
00001F98                          1943          
00001F98  6000 051A               1944          BRA     INVALID_DATA
00001F9C                          1945  
00001F9C                          1946  OR_MEM_TO_REG_B      
00001F9C  16FC 004F               1947          MOVE.B  #'O',(A3)+              add OR.B to buffer
00001FA0  16FC 0052               1948          MOVE.B  #'R',(A3)+
00001FA4  16FC 002E               1949          MOVE.B  #'.',(A3)+
00001FA8  16FC 0042               1950          MOVE.B  #'B',(A3)+
00001FAC  16FC 0020               1951          MOVE.B  #' ',(A3)+
00001FB0  16FC 0020               1952          MOVE.B  #' ',(A3)+
00001FB4                          1953          
00001FB4  6000 003A               1954          BRA     OR_MEM_TO_REG_DN_EA     buffer the rest
00001FB8                          1955          
00001FB8                          1956  OR_MEM_TO_REG_W      
00001FB8  16FC 004F               1957          MOVE.B  #'O',(A3)+              add OR.W to buffer
00001FBC  16FC 0052               1958          MOVE.B  #'R',(A3)+
00001FC0  16FC 002E               1959          MOVE.B  #'.',(A3)+
00001FC4  16FC 0057               1960          MOVE.B  #'W',(A3)+
00001FC8  16FC 0020               1961          MOVE.B  #' ',(A3)+
00001FCC  16FC 0020               1962          MOVE.B  #' ',(A3)+
00001FD0                          1963          
00001FD0  6000 001E               1964          BRA     OR_MEM_TO_REG_DN_EA     buffer the rest
00001FD4                          1965          
00001FD4                          1966  OR_MEM_TO_REG_L      
00001FD4  16FC 004F               1967          MOVE.B  #'O',(A3)+              add OR.L to buffer
00001FD8  16FC 0052               1968          MOVE.B  #'R',(A3)+
00001FDC  16FC 002E               1969          MOVE.B  #'.',(A3)+
00001FE0  16FC 004C               1970          MOVE.B  #'L',(A3)+
00001FE4  16FC 0020               1971          MOVE.B  #' ',(A3)+
00001FE8  16FC 0020               1972          MOVE.B  #' ',(A3)+
00001FEC                          1973          
00001FEC  6000 0002               1974          BRA     OR_MEM_TO_REG_DN_EA     buffer the rest
00001FF0                          1975          
00001FF0                          1976  OR_MEM_TO_REG_DN_EA
00001FF0  3C3C 0E00               1977          MOVE.W  #BIT_11_TO_09,D6        bitmask bits 11-09
00001FF4  CC42                    1978          AND.W   D2,D6                   and with instruction
00001FF6  E04E                    1979          LSR.W   #8,D6                   shift to the right
00001FF8  E24E                    1980          LSR.W   #1,D6               
00001FFA  4EB9 000023A4           1981          JSR     BUFFER_DN               buffer destination EA
00002000                          1982          
00002000  4EB9 0000247A           1983          JSR     BUFFER_COMMA            buffer comma
00002006  4EB9 000022BA           1984          JSR     SOURCE_MOVE             buffer source EA
0000200C                          1985          
0000200C  4EB9 0000248E           1986          JSR     PRINT_VALID_BUFFER      prints
00002012  4EB9 00002480           1987          JSR     PRINT_NEWLINE           print new line
00002018                          1988          
00002018  6000 F198               1989          BRA     START_DISASSEMBLER
0000201C                          1990          
0000201C                          1991  *******************************************************************
0000201C                          1992  *          MULS                                                   *
0000201C                          1993  *******************************************************************
0000201C                          1994  MULS
0000201C  16FC 004D               1995          MOVE.B  #'M',(A3)+              add MULS to buffer
00002020  16FC 0055               1996          MOVE.B  #'U',(A3)+
00002024  16FC 004C               1997          MOVE.B  #'L',(A3)+
00002028  16FC 0053               1998          MOVE.B  #'S',(A3)+
0000202C  16FC 002E               1999          MOVE.B  #'.',(A3)+
00002030  16FC 0057               2000          MOVE.B  #'W',(A3)+
00002034  16FC 0020               2001          MOVE.B  #' ',(A3)+
00002038  16FC 0020               2002          MOVE.B  #' ',(A3)+
0000203C                          2003          
0000203C  7200                    2004          MOVE.L  #$00000000,D1           clear D1 to check word
0000203E  4EB9 000022BA           2005          JSR     SOURCE_MOVE             buffer EA
00002044  4EB9 0000247A           2006          JSR     BUFFER_COMMA            prints comma
0000204A                          2007          
0000204A  3A3C 0E00               2008          MOVE.W  #BIT_11_TO_09,D5        bitmask bits 11-09
0000204E  CA42                    2009          AND.W   D2,D5                   and with instruction
00002050  E04D                    2010          LSR.W   #8,D5                   shift right
00002052  E24D                    2011          LSR.W   #1,D5
00002054  1C05                    2012          MOVE.B  D5,D6                   move the data in D5 to D6
00002056  4EB9 000023A4           2013          JSR     BUFFER_DN               buffer Dn
0000205C                          2014          
0000205C  4EB9 0000248E           2015          JSR     PRINT_VALID_BUFFER      prints
00002062  4EB9 00002480           2016          JSR     PRINT_NEWLINE           print new line
00002068                          2017          
00002068  6000 F148               2018          BRA     START_DISASSEMBLER
0000206C                          2019  
0000206C                          2020  *******************************************************************
0000206C                          2021  *          SUB                                                    *
0000206C                          2022  *******************************************************************       
0000206C                          2023  SUB
0000206C  16FC 0053               2024          MOVE.B  #'S',(A3)+
00002070  16FC 0055               2025          MOVE.B  #'U',(A3)+
00002074  16FC 0042               2026          MOVE.B  #'B',(A3)+
00002078  16FC 002E               2027          MOVE.B  #'.',(A3)+
0000207C                          2028          
0000207C  4EB9 00002230           2029          JSR     BUFFER_SIZE
00002082                          2030          
00002082  16FC 0020               2031          MOVE.B  #' ',(A3)+
00002086  16FC 0020               2032          MOVE.B  #' ',(A3)+
0000208A  16FC 0020               2033          MOVE.B  #' ',(A3)+
0000208E                          2034          
0000208E  6000 F8E8               2035          BRA     ADD_SUB_DIRECTION       
00002092                          2036          
00002092                          2037  *******************************************************************
00002092                          2038  *          SUBQ                                                   *
00002092                          2039  *******************************************************************          
00002092                          2040  SUBQ
00002092  16FC 0053               2041          MOVE.B  #'S',(A3)+
00002096  16FC 0055               2042          MOVE.B  #'U',(A3)+
0000209A  16FC 0042               2043          MOVE.B  #'B',(A3)+
0000209E  16FC 0051               2044          MOVE.B  #'Q',(A3)+
000020A2  16FC 002E               2045          MOVE.B  #'.',(A3)+
000020A6                          2046          
000020A6  4EB9 00002230           2047          JSR     BUFFER_SIZE
000020AC                          2048          
000020AC  16FC 0020               2049          MOVE.B  #' ',(A3)+
000020B0  16FC 0020               2050          MOVE.B  #' ',(A3)+
000020B4                          2051          
000020B4  16FC 0023               2052          MOVE.B  #'#',(A3)+
000020B8  4EB9 00002214           2053          JSR     SOURCE_NUM
000020BE  4EB9 0000247A           2054          JSR     BUFFER_COMMA        
000020C4  4EB9 000022BA           2055          JSR     SOURCE_MOVE
000020CA                          2056          
000020CA  4EB9 0000248E           2057          JSR     PRINT_VALID_BUFFER  prints
000020D0  4EB9 00002480           2058          JSR     PRINT_NEWLINE       print new line
000020D6                          2059          
000020D6  6000 F0DA               2060          BRA     START_DISASSEMBLER
000020DA                          2061          
000020DA                          2062          
000020DA                          2063  *******************************************************************
000020DA                          2064  *          MEMORY_SHIFT_1110                                      *
000020DA                          2065  *******************************************************************
000020DA                          2066  MEMORY_SHIFT_1110
000020DA  3A3C 0E00               2067          MOVE.W  #D_REG_BITMASK,D5        bitmask bits 07-06
000020DE  CA42                    2068          AND.W   D2,D5                   and with instruction        *0000000000011000
000020E0  E04D                    2069          LSR.W   #8,D5
000020E2  E24D                    2070          LSR.W   #1,D5
000020E4                          2071          
000020E4  BA7C 0000               2072          CMP.W   #%000,D5 
000020E8                          2073  *ASd                
000020E8  6700 0016               2074          BEQ     ASd_MEM
000020EC                          2075          
000020EC  BA7C 0001               2076          CMP.W   #%001,D5 
000020F0                          2077  *LSd                
000020F0  6700 001A               2078          BEQ     LSd_MEM
000020F4                          2079          
000020F4  BA7C 0003               2080          CMP.W   #%011,D5 
000020F8                          2081  *ROd                
000020F8  6700 001E               2082          BEQ     ROd_MEM
000020FC                          2083  
000020FC  6000 03B6               2084          BRA     INVALID_DATA            invalid data
00002100                          2085          
00002100                          2086  *******************************************************************
00002100                          2087  *          ASd_MEM                                               *
00002100                          2088  *******************************************************************
00002100                          2089  ASd_MEM
00002100  16FC 0041               2090          MOVE.B  #'A',(A3)+
00002104  16FC 0053               2091          MOVE.B  #'S',(A3)+
00002108                          2092          
00002108  6000 001A               2093          BRA     OP_1110_MEM
0000210C                          2094          
0000210C                          2095  *******************************************************************
0000210C                          2096  *          LSd_MEM                                                *
0000210C                          2097  *******************************************************************
0000210C                          2098  LSd_MEM
0000210C  16FC 004C               2099          MOVE.B  #'L',(A3)+
00002110  16FC 0053               2100          MOVE.B  #'S',(A3)+
00002114                          2101          
00002114  6000 000E               2102          BRA     OP_1110_MEM
00002118                          2103  
00002118                          2104  *******************************************************************
00002118                          2105  *          ROd_MEM                                                *
00002118                          2106  *******************************************************************
00002118                          2107  ROd_MEM
00002118  16FC 0052               2108          MOVE.B  #'R',(A3)+
0000211C  16FC 004F               2109          MOVE.B  #'O',(A3)+
00002120                          2110          
00002120  6000 0002               2111          BRA     OP_1110_MEM
00002124                          2112          
00002124                          2113  *******************************************************************
00002124                          2114  *          OP_1110_MEM                                            *
00002124                          2115  *******************************************************************
00002124                          2116  OP_1110_MEM        
00002124  4EB9 000021EC           2117          JSR     DIRECTION
0000212A                          2118          
0000212A  16FC 002E               2119          MOVE.B  #'.',(A3)+
0000212E  16FC 0057               2120          MOVE.B  #'W',(A3)+
00002132  16FC 0020               2121          MOVE.B  #' ',(A3)+
00002136  16FC 0020               2122          MOVE.B  #' ',(A3)+
0000213A  16FC 0020               2123          MOVE.B  #' ',(A3)+
0000213E                          2124          
0000213E  3A3C 0007               2125          MOVE.W  #S_REG_BITMASK ,D5        bitmask bits 07-06
00002142  CA42                    2126          AND.W   D2,D5                   and with instruction        *0000000000011000
00002144  2C05                    2127          MOVE.L  D5,D6
00002146                          2128          
00002146                          2129  
00002146  4EB9 000022BA           2130          JSR     SOURCE_MOVE
0000214C                          2131          
0000214C  4EB9 0000248E           2132          JSR     PRINT_VALID_BUFFER  prints
00002152  4EB9 00002480           2133          JSR     PRINT_NEWLINE       print new line
00002158                          2134          
00002158  6000 F058               2135          BRA     START_DISASSEMBLER
0000215C                          2136          
0000215C                          2137  
0000215C                          2138  *******************************************************************
0000215C                          2139  *          REGISTER_SHIFT_1110                                    *
0000215C                          2140  *******************************************************************    
0000215C                          2141  REGISTER_SHIFT_1110
0000215C  3A3C 0018               2142          MOVE.W  #BIT_04_TO_03,D5        bitmask bits 04-03
00002160  CA42                    2143          AND.W   D2,D5                   and with instruction        *0000000000011000
00002162  E64D                    2144          LSR.W   #3,D5
00002164                          2145  *ASd_REG        
00002164  BA7C 0000               2146          CMP.W   #%00,D5                 
00002168  6700 0016               2147          BEQ     ASd_REG
0000216C                          2148  *LSd_REG        
0000216C  BA7C 0001               2149          CMP.W   #%01,D5                 
00002170  6700 001A               2150          BEQ     LSd_REG
00002174                          2151  *ROd_REG        
00002174  BA7C 0003               2152          CMP.W   #%11,D5                 
00002178  6700 001E               2153          BEQ     ROd_REG
0000217C                          2154  *INVALID
0000217C  6000 0336               2155          BRA     INVALID_DATA            invalid data
00002180                          2156  
00002180                          2157  *******************************************************************
00002180                          2158  *          ASd_REG                                                *
00002180                          2159  *******************************************************************
00002180                          2160  ASd_REG
00002180  16FC 0041               2161          MOVE.B  #'A',(A3)+
00002184  16FC 0053               2162          MOVE.B  #'S',(A3)+
00002188                          2163          
00002188  6000 001A               2164          BRA     OP_1110_REG
0000218C                          2165          
0000218C                          2166  *******************************************************************
0000218C                          2167  *          LSd_REG                                                *
0000218C                          2168  *******************************************************************
0000218C                          2169  LSd_REG
0000218C  16FC 004C               2170          MOVE.B  #'L',(A3)+
00002190  16FC 0053               2171          MOVE.B  #'S',(A3)+
00002194                          2172          
00002194  6000 000E               2173          BRA     OP_1110_REG
00002198                          2174  
00002198                          2175  *******************************************************************
00002198                          2176  *          ROd_REG                                                *
00002198                          2177  *******************************************************************
00002198                          2178  ROd_REG
00002198  16FC 0052               2179          MOVE.B  #'R',(A3)+
0000219C  16FC 004F               2180          MOVE.B  #'O',(A3)+
000021A0                          2181          
000021A0  6000 0002               2182          BRA     OP_1110_REG
000021A4                          2183          
000021A4                          2184  *******************************************************************
000021A4                          2185  *          OP_1110_REG                                            *
000021A4                          2186  *******************************************************************
000021A4                          2187  OP_1110_REG        
000021A4  4EB9 000021EC           2188          JSR     DIRECTION
000021AA                          2189          
000021AA  16FC 002E               2190          MOVE.B  #'.',(A3)+
000021AE                          2191          
000021AE  4EB9 00002230           2192          JSR     BUFFER_SIZE
000021B4                          2193          
000021B4  16FC 0020               2194          MOVE.B  #' ',(A3)+
000021B8  16FC 0020               2195          MOVE.B  #' ',(A3)+
000021BC  16FC 0020               2196          MOVE.B  #' ',(A3)+
000021C0                          2197          
000021C0  4EB9 00002200           2198          JSR     IMMEDIATE_OR_REGISTER
000021C6                          2199  
000021C6  4EB9 00002214           2200          JSR     SOURCE_NUM
000021CC  4EB9 0000247A           2201          JSR     BUFFER_COMMA
000021D2  16FC 0044               2202          MOVE.B  #'D',(A3)+ 
000021D6  4EB9 00002224           2203          JSR     DESTINATION_NUM
000021DC                          2204          
000021DC  4EB9 0000248E           2205          JSR     PRINT_VALID_BUFFER  prints
000021E2  4EB9 00002480           2206          JSR     PRINT_NEWLINE       print new line
000021E8                          2207          
000021E8  6000 EFC8               2208          BRA     START_DISASSEMBLER
000021EC                          2209          
000021EC                          2210  *******************************************************************
000021EC                          2211  *          DIRECTION                                              *
000021EC                          2212  *******************************************************************
000021EC                          2213  DIRECTION        
000021EC  3A3C 0100               2214          MOVE.W  #BIT_08_BITMASK,D5        bitmask bit 08
000021F0  CA42                    2215          AND.W   D2,D5                     and with instruction  
000021F2  E04D                    2216          LSR.W   #8,D5
000021F4                          2217          
000021F4  BA3C 0000               2218          CMP.B   #0,D5
000021F8                          2219  *R
000021F8  6700 026E               2220          BEQ     BUFFER_R
000021FC                          2221  *L
000021FC  6000 0264               2222          BRA     BUFFER_L
00002200                          2223          
00002200                          2224  *******************************************************************
00002200                          2225  *          IMMEDIATE_OR_REGISTER                                  *
00002200                          2226  *******************************************************************        
00002200                          2227  IMMEDIATE_OR_REGISTER
00002200  3A3C 0020               2228          MOVE.W  #BIT_05_BITMASK,D5        bitmask bit 05
00002204  CA42                    2229          AND.W   D2,D5                     and with instruction  
00002206  EA4D                    2230          LSR.W   #5,D5
00002208                          2231          
00002208  BA3C 0000               2232          CMP.B   #0,D5
0000220C                          2233  *#
0000220C  6700 0260               2234          BEQ     BUFFER_HASHTAG
00002210                          2235  *D
00002210  6000 0262               2236          BRA     BUFFER_D
00002214                          2237          
00002214                          2238  *******************************************************************
00002214                          2239  *          SOURCE_NUM                                             *
00002214                          2240  *******************************************************************         
00002214                          2241  SOURCE_NUM
00002214  3A3C 0E00               2242          MOVE.W  #D_REG_BITMASK,D5          bitmask bit 11-09
00002218  CA42                    2243          AND.W   D2,D5                     and with instruction  
0000221A  E04D                    2244          LSR.W   #8,D5
0000221C  E24D                    2245          LSR.W   #1,D5
0000221E  2C05                    2246          MOVE.L  D5,D6
00002220                          2247          
00002220                          2248  *REGISTER_NUM
00002220  6000 01C4               2249          BRA     REGISTER_NUMBER
00002224                          2250  
00002224                          2251  *******************************************************************
00002224                          2252  *          DESTINATION_NUM                                        *
00002224                          2253  *******************************************************************         
00002224                          2254  DESTINATION_NUM
00002224  3A3C 0007               2255          MOVE.W  #S_REG_BITMASK,D5          bitmask bit 1-09
00002228  CA42                    2256          AND.W   D2,D5                     and with instruction 
0000222A  2C05                    2257          MOVE.L  D5,D6
0000222C                          2258          
0000222C                          2259  *REGISTER_NUM
0000222C  6000 01B8               2260          BRA     REGISTER_NUMBER
00002230                          2261          
00002230                          2262  *******************************************************************
00002230                          2263  *          BUFFER_SIZE                                            *
00002230                          2264  *******************************************************************       
00002230                          2265  BUFFER_SIZE
00002230  3A3C 00C0               2266          MOVE.W  #BIT_07_TO_06,D5            bitmask bit 07-06
00002234  CA42                    2267          AND.W   D2,D5                       and with instruction  
00002236  EC4D                    2268          LSR.W   #6,D5
00002238                          2269  *B        
00002238  BA3C 0000               2270          CMP.B   #%00,D5
0000223C  6700 0218               2271          BEQ     BUFFER_B
00002240                          2272  *W       
00002240  BA3C 0001               2273          CMP.B   #%01,D5
00002244  6700 0216               2274          BEQ     BUFFER_W
00002248                          2275  *L       
00002248  BA3C 0002               2276          CMP.B   #%10,D5
0000224C  6700 0214               2277          BEQ     BUFFER_L
00002250                          2278  *INVALID        
00002250  6000 0262               2279          BRA     INVALID_DATA
00002254                          2280          
00002254                          2281  *******************************************************************
00002254                          2282  *          BUFFER_SIZE_WL                                         *
00002254                          2283  ******************************************************************* 
00002254                          2284  BUFFER_SIZE_WL
00002254  3A3C 0100               2285          MOVE.W  #BIT_08_BITMASK,D5          bitmask bit 08
00002258  CA42                    2286          AND.W   D2,D5                       and with instruction  
0000225A  E04D                    2287          LSR.W   #8,D5
0000225C                          2288  *B        
0000225C  BA3C 0000               2289          CMP.B   #0,D5
00002260  6700 01FA               2290          BEQ     BUFFER_W
00002264                          2291  *W       
00002264  BA3C 0001               2292          CMP.B   #1,D5
00002268  6700 01F8               2293          BEQ     BUFFER_L
0000226C                          2294          
0000226C                          2295  
0000226C                          2296  
0000226C                          2297  *******************************************************************
0000226C                          2298  *          8, 16, 32 DISPLACEMENTS                                *
0000226C                          2299  *******************************************************************
0000226C                          2300  DISPLACE_8
0000226C  7200                    2301          MOVE.L  #$00000000,D1           clear D1
0000226E  1205                    2302          MOVE.B  D5,D1                   move the 8 bit displacement
00002270  4401                    2303          NEG.B   D1                      flip bits
00002272  5201                    2304          ADD.B   #1,D1                   add one
00002274                          2305          
00002274  103C 0003               2306          MOVE.B  #3,D0                   display signed number in D1.L
00002278  4E4F                    2307          TRAP    #15
0000227A                          2308          
0000227A  4EB9 00002480           2309          JSR     PRINT_NEWLINE           print new line
00002280                          2310          
00002280  6000 EF30               2311          BRA     START_DISASSEMBLER
00002284                          2312  
00002284                          2313  DISPLACE_16
00002284  7200                    2314          MOVE.L  #$00000000,D1           clear D1
00002286  361D                    2315          MOVE.W  (A5)+,D3                move the data from A5 to D3
00002288  3203                    2316          MOVE.W  D3,D1                   move the 16 bit displacement
0000228A                          2317   
0000228A  48C1                    2318          EXT.L   D1                      sign extend
0000228C  D28D                    2319          ADD.L   A5,D1                   add the current address
0000228E  5501                    2320          SUB.B   #2,D1                   subtract 2 to get correct address
00002290                          2321   
00002290  103C 0003               2322          MOVE.B  #3,D0                   display signed number in D1.L
00002294  4E4F                    2323          TRAP    #15
00002296                          2324          
00002296  4EB9 00002480           2325          JSR     PRINT_NEWLINE
0000229C                          2326          
0000229C  6000 EF14               2327          BRA     START_DISASSEMBLER
000022A0                          2328  
000022A0                          2329  DISPLACE_32
000022A0  7200                    2330          MOVE.L  #$00000000,D1           clear D1 
000022A2  261D                    2331          MOVE.L  (A5)+,D3                move the data from A5 to D3
000022A4  2203                    2332          MOVE.L  D3,D1                   move the 32 bit displacement
000022A6                          2333          
000022A6  D28D                    2334          ADD.L   A5,D1
000022A8  5501                    2335          SUB.B   #2,D1                   subtract 2 to get correct address
000022AA                          2336          
000022AA  103C 0003               2337          MOVE.B  #3,D0                   display signed number in D1.L
000022AE  4E4F                    2338          TRAP    #15
000022B0                          2339          
000022B0  4EB9 00002480           2340          JSR     PRINT_NEWLINE
000022B6                          2341          
000022B6  6000 EEFA               2342          BRA     START_DISASSEMBLER
000022BA                          2343          
000022BA                          2344  *******************************************************************
000022BA                          2345  *          SOURCE_MOVE                                            *
000022BA                          2346  *******************************************************************        
000022BA                          2347  SOURCE_MOVE
000022BA  383C 0038               2348          MOVE.W  #S_MODE_BITMASK,D4  holds bitmask %0000000000111000
000022BE  3A02                    2349          MOVE.W  D2,D5               moves instruction to D5
000022C0  CA44                    2350          AND     D4,D5               uses bitmask to get source mode
000022C2  E64D                    2351          LSR.W   #3,D5               shifts source mode right
000022C4                          2352          
000022C4  383C 0007               2353          MOVE.W  #S_REG_BITMASK,D4   holds bitmask %0000000000000111
000022C8  3C02                    2354          MOVE.W  D2,D6               moves instruction to D6
000022CA  CC44                    2355          AND     D4,D6               uses bitmask to get source register
000022CC                          2356          
000022CC  4EB9 000022F2           2357          JSR     MODE_TABLE          figures out the mode and buffers
000022D2                          2358          
000022D2  4E75                    2359          RTS
000022D4                          2360          
000022D4                          2361  *******************************************************************
000022D4                          2362  *          DESTINATION_MOVE                                       *
000022D4                          2363  *******************************************************************
000022D4                          2364  DESTINATION_MOVE   
000022D4  383C 01C0               2365          MOVE.W  #D_MODE_BITMASK,D4      holds bitmask %0000000111000000
000022D8  3A02                    2366          MOVE.W  D2,D5                   moves instruction to D5
000022DA  CA44                    2367          AND     D4,D5                   uses bitmask to get dest mode
000022DC  EC4D                    2368          LSR.W   #6,D5                   shifts dest mode right
000022DE                          2369          
000022DE  383C 0E00               2370          MOVE.W  #D_REG_BITMASK,D4       holds bitmask %0000111000000000
000022E2  3C02                    2371          MOVE.W  D2,D6                   moves instruction to D6
000022E4  CC44                    2372          AND     D4,D6                   uses bitmask to get dest reg
000022E6  E04E                    2373          LSR.W   #8,D6                   shifts dest reg right
000022E8  E24E                    2374          LSR.W   #1,D6
000022EA                          2375          
000022EA  4EB9 000022F2           2376          JSR     MODE_TABLE              figures out the mode and buffers
000022F0                          2377          
000022F0  4E75                    2378          RTS
000022F2                          2379          
000022F2                          2380  ****************************************************************************************
000022F2                          2381  *                               MODE_TABLE                                             *
000022F2                          2382  ****************************************************************************************
000022F2                          2383  *   PRE:   D2 DATA TO MINIPULATE
000022F2                          2384  *          D3 ORIGINAL CODE
000022F2                          2385  *          D4 HOLDS BITMASK
000022F2                          2386  *          D5 HOLDS MODE
000022F2                          2387  *          D6 HOLDS REGISTER 
000022F2                          2388  *          D7 MAX LINES *
000022F2                          2389  *          
000022F2                          2390  *   POST:  Buffers the Mode
000022F2                          2391  *------------------------------------------------------------------    
000022F2                          2392  MODE_TABLE
000022F2  BA3C 0000               2393          CMP.B   #%000,D5            mode is a data register Dn
000022F6  6700 00AC               2394          BEQ     BUFFER_DN   
000022FA                          2395          
000022FA  BA3C 0001               2396          CMP.B   #%001,D5            mode is an address register An
000022FE  6700 00AC               2397          BEQ     BUFFER_AN
00002302                          2398          
00002302  BA3C 0002               2399          CMP.B   #%010,D5            mode is an address register indirect (An)
00002306  6700 00AC               2400          BEQ     BUFFER_AN_I
0000230A                          2401          
0000230A  BA3C 0003               2402          CMP.B   #%011,D5            mode is an ari post (An)+
0000230E  6700 00B2               2403          BEQ     BUFFER_AN_POST
00002312                          2404          
00002312  BA3C 0004               2405          CMP.B   #%100,D5            mode is an ari pre -(An)
00002316  6700 00BC               2406          BEQ     BUFFER_AN_PRE
0000231A                          2407          
0000231A  BA3C 0007               2408          CMP.B   #%111,D5            mode is either immediate, or absolute
0000231E  6700 0006               2409          BEQ     OTHER_MODE
00002322                          2410      
00002322  6000 0190               2411          BRA     INVALID_DATA
00002326                          2412          
00002326                          2413  *******************************************************************
00002326                          2414  *          OTHER_MODE                                             *
00002326                          2415  *******************************************************************
00002326                          2416  OTHER_MODE
00002326                          2417  * absolute addressing
00002326  BC3C 0000               2418          CMP.B   #%000,D6            register is 000
0000232A  6700 0020               2419          BEQ     ABSOLUTE_WORD       absolute word
0000232E                          2420          
0000232E  BC3C 0001               2421          CMP.B   #%001,D6            register is 001
00002332  6700 002E               2422          BEQ     ABSOLUTE_LONG       absolute long
00002336                          2423  
00002336                          2424  * immediate data
00002336  DC01                    2425          ADD.B   D1,D6
00002338  BC3C 0004               2426          CMP.B   #%100,D6                 register is 100 and word
0000233C  6700 003A               2427          BEQ     IMMEDIATE_DATA_WORD      immediate data
00002340                          2428          
00002340  BC3C 0005               2429          CMP.B   #%101,D6                 register is 100 and long
00002344  6700 0048               2430          BEQ     IMMEDIATE_DATA_LONG      immediate data
00002348                          2431          
00002348  6000 016A               2432          BRA     INVALID_DATA
0000234C                          2433          
0000234C                          2434  *******************************************************************
0000234C                          2435  *          ABSOLUTE_WORD                                          *
0000234C                          2436  *******************************************************************        
0000234C                          2437  ABSOLUTE_WORD
0000234C  4EB9 0000248E           2438          JSR     PRINT_VALID_BUFFER      prints what's in the buffer
00002352                          2439          
00002352  7600                    2440          MOVE.L  #$00000000,D3           clear D3
00002354  7200                    2441          MOVE.L  #$00000000,D1           clear D1
00002356  361D                    2442          MOVE.W  (A5)+,D3                move the data from A5 to D3
00002358  3203                    2443          MOVE.W  D3,D1                   move the word 
0000235A                          2444   
0000235A  103C 0003               2445          MOVE.B  #3,D0                   display signed number in D1.L
0000235E  4E4F                    2446          TRAP    #15
00002360                          2447          
00002360  4E75                    2448          RTS
00002362                          2449          
00002362                          2450  *******************************************************************
00002362                          2451  *          ABSOLUTE_LONG                                          *
00002362                          2452  *******************************************************************        
00002362                          2453  ABSOLUTE_LONG
00002362  4EB9 0000248E           2454          JSR     PRINT_VALID_BUFFER      prints what's in the buffer
00002368                          2455          
00002368  7600                    2456          MOVE.L  #$00000000,D3           clear D3
0000236A  7200                    2457          MOVE.L  #$00000000,D1           clear D1
0000236C  261D                    2458          MOVE.L  (A5)+,D3                move the data from A5 to D3
0000236E  2203                    2459          MOVE.L  D3,D1                   move the 16 bit displacement
00002370                          2460   
00002370  103C 0003               2461          MOVE.B  #3,D0                   display signed number in D1.L
00002374  4E4F                    2462          TRAP    #15
00002376                          2463          
00002376  4E75                    2464          RTS
00002378                          2465          
00002378                          2466  *******************************************************************
00002378                          2467  *          IMMEDIATE_DATA                                         *
00002378                          2468  *******************************************************************        
00002378                          2469  IMMEDIATE_DATA_WORD       
00002378  16FC 0023               2470          MOVE.B  #'#',(A3)+              print #
0000237C  4EB9 0000248E           2471          JSR     PRINT_VALID_BUFFER
00002382                          2472       
00002382  361D                    2473          MOVE.W  (A5)+,D3                move the data from A5 to D3
00002384  3203                    2474          MOVE.W  D3,D1                   move the 16 bit displacement
00002386                          2475   
00002386  103C 0003               2476          MOVE.B  #3,D0                   display signed number in D1.L
0000238A  4E4F                    2477          TRAP    #15
0000238C                          2478          
0000238C  4E75                    2479          RTS
0000238E                          2480          
0000238E                          2481  IMMEDIATE_DATA_LONG
0000238E  16FC 0023               2482          MOVE.B  #'#',(A3)+              print #
00002392  4EB9 0000248E           2483          JSR     PRINT_VALID_BUFFER
00002398                          2484          
00002398  261D                    2485          MOVE.L  (A5)+,D3                move the data from A5 to D3
0000239A  2203                    2486          MOVE.L  D3,D1                   move the 16 bit displacement
0000239C                          2487   
0000239C  103C 0003               2488          MOVE.B  #3,D0                   display signed number in D1.L
000023A0  4E4F                    2489          TRAP    #15
000023A2                          2490          
000023A2  4E75                    2491          RTS
000023A4                          2492          
000023A4                          2493  *******************************************************************
000023A4                          2494  *          BUFFER_DN                                              *
000023A4                          2495  ******************************************************************* 
000023A4                          2496  BUFFER_DN
000023A4  16FC 0044               2497          MOVE.B  #'D',(A3)+          add D to valid buffer
000023A8  6000 003C               2498          BRA     REGISTER_NUMBER     add register number to D
000023AC                          2499          
000023AC                          2500  *******************************************************************
000023AC                          2501  *          BUFFER_AN                                              *
000023AC                          2502  *******************************************************************
000023AC                          2503  BUFFER_AN
000023AC  16FC 0041               2504          MOVE.B  #'A',(A3)+          add A to valid buffer
000023B0  6000 0034               2505          BRA     REGISTER_NUMBER     add register number to A      
000023B4                          2506  
000023B4                          2507  *******************************************************************
000023B4                          2508  *          BUFFER_AN_I                                            *
000023B4                          2509  *******************************************************************
000023B4                          2510  BUFFER_AN_I
000023B4  16FC 0028               2511          MOVE.B  #'(',(A3)+          add ( to valid buffer
000023B8  4EB8 23AC               2512          JSR BUFFER_AN               add An to valid buffer
000023BC  16FC 0029               2513          MOVE.B  #')',(A3)+          add ) to valid buffer
000023C0  4E75                    2514          RTS
000023C2                          2515          
000023C2                          2516  *******************************************************************
000023C2                          2517  *          BUFFER_AN_POST                                         *
000023C2                          2518  *******************************************************************
000023C2                          2519  BUFFER_AN_POST
000023C2  16FC 0028               2520          MOVE.B  #'(',(A3)+          add ( to valid buffer
000023C6  4EB8 23AC               2521          JSR BUFFER_AN               add An to valid buffer
000023CA  16FC 0029               2522          MOVE.B  #')',(A3)+          add ) to valid buffer
000023CE  16FC 002B               2523          MOVE.B  #'+',(A3)+          add + to valid buffer
000023D2  4E75                    2524          RTS
000023D4                          2525          
000023D4                          2526  *******************************************************************
000023D4                          2527  *          BUFFER_AN_PRE                                          *
000023D4                          2528  *******************************************************************
000023D4                          2529  BUFFER_AN_PRE
000023D4  16FC 002D               2530          MOVE.B  #'-',(A3)+          add + to valid buffer
000023D8  16FC 0028               2531          MOVE.B  #'(',(A3)+          add ( to valid buffer
000023DC  4EB8 23AC               2532          JSR BUFFER_AN               add An to valid buffer
000023E0  16FC 0029               2533          MOVE.B  #')',(A3)+          add ) to valid buffer
000023E4  4E75                    2534          RTS
000023E6                          2535  
000023E6                          2536  *******************************************************************
000023E6                          2537  *          REGISTER_NUMBER                                        *
000023E6                          2538  *******************************************************************
000023E6                          2539  REGISTER_NUMBER
000023E6  BC3C 0000               2540          CMP.B   #0,D6              figure out which register number
000023EA  6700 003A               2541          BEQ     BUFFER_0
000023EE                          2542          
000023EE  BC3C 0001               2543          CMP.B   #1,D6
000023F2  6700 0038               2544          BEQ     BUFFER_1
000023F6                          2545          
000023F6  BC3C 0002               2546          CMP.B   #2,D6
000023FA  6700 0036               2547          BEQ     BUFFER_2
000023FE                          2548          
000023FE  BC3C 0003               2549          CMP.B   #3,D6
00002402  6700 0034               2550          BEQ     BUFFER_3
00002406                          2551          
00002406  BC3C 0004               2552          CMP.B   #4,D6
0000240A  6700 0032               2553          BEQ     BUFFER_4
0000240E                          2554          
0000240E  BC3C 0005               2555          CMP.B   #5,D6
00002412  6700 0030               2556          BEQ     BUFFER_5
00002416                          2557          
00002416  BC3C 0006               2558          CMP.B   #6,D6
0000241A  6700 002E               2559          BEQ     BUFFER_6
0000241E                          2560          
0000241E  BC3C 0007               2561          CMP.B   #7,D6
00002422  6700 002C               2562          BEQ     BUFFER_7
00002426                          2563  
00002426                          2564  *******************************************************************
00002426                          2565  *          BUFFER_# TABLE                                         *
00002426                          2566  *******************************************************************             
00002426                          2567  BUFFER_0
00002426  16FC 0030               2568          MOVE.B  #'0',(A3)+
0000242A  4E75                    2569          RTS
0000242C                          2570          
0000242C                          2571  BUFFER_1
0000242C  16FC 0031               2572          MOVE.B  #'1',(A3)+
00002430  4E75                    2573          RTS
00002432                          2574          
00002432                          2575  BUFFER_2
00002432  16FC 0032               2576          MOVE.B  #'2',(A3)+
00002436  4E75                    2577          RTS
00002438                          2578          
00002438                          2579  BUFFER_3
00002438  16FC 0033               2580          MOVE.B  #'3',(A3)+
0000243C  4E75                    2581          RTS
0000243E                          2582          
0000243E                          2583  BUFFER_4
0000243E  16FC 0034               2584          MOVE.B  #'4',(A3)+
00002442  4E75                    2585          RTS
00002444                          2586          
00002444                          2587  BUFFER_5
00002444  16FC 0035               2588          MOVE.B  #'5',(A3)+
00002448  4E75                    2589          RTS
0000244A                          2590          
0000244A                          2591  BUFFER_6
0000244A  16FC 0036               2592          MOVE.B  #'6',(A3)+
0000244E  4E75                    2593          RTS
00002450                          2594          
00002450                          2595  BUFFER_7
00002450  16FC 0037               2596          MOVE.B  #'7',(A3)+
00002454  4E75                    2597          RTS
00002456                          2598          
00002456                          2599  *******************************************************************
00002456                          2600  *          BUFFER_B                                               *
00002456                          2601  *******************************************************************
00002456                          2602  BUFFER_B
00002456  16FC 0042               2603          MOVE.B  #'B',(A3)+
0000245A  4E75                    2604          RTS
0000245C                          2605  
0000245C                          2606  *******************************************************************
0000245C                          2607  *          BUFFER_W                                               *
0000245C                          2608  *******************************************************************
0000245C                          2609  BUFFER_W
0000245C  16FC 0057               2610          MOVE.B  #'W',(A3)+
00002460  4E75                    2611          RTS
00002462                          2612  
00002462                          2613  *******************************************************************
00002462                          2614  *          BUFFER_L                                               *
00002462                          2615  *******************************************************************
00002462                          2616  BUFFER_L
00002462  16FC 004C               2617          MOVE.B  #'L',(A3)+
00002466  4E75                    2618          RTS
00002468                          2619  
00002468                          2620  *******************************************************************
00002468                          2621  *          BUFFER_R                                               *
00002468                          2622  *******************************************************************
00002468                          2623  BUFFER_R
00002468  16FC 0052               2624          MOVE.B  #'R',(A3)+
0000246C  4E75                    2625          RTS
0000246E                          2626  
0000246E                          2627  *******************************************************************
0000246E                          2628  *          BUFFER_HASHTAG                                         *
0000246E                          2629  *******************************************************************
0000246E                          2630  BUFFER_HASHTAG
0000246E  16FC 0023               2631          MOVE.B  #'#',(A3)+
00002472  4E75                    2632          RTS
00002474                          2633  
00002474                          2634  *******************************************************************
00002474                          2635  *          BUFFER_D                                               *
00002474                          2636  *******************************************************************
00002474                          2637  BUFFER_D
00002474  16FC 0044               2638          MOVE.B  #'D',(A3)+
00002478  4E75                    2639          RTS
0000247A                          2640  
0000247A                          2641         
0000247A                          2642  *******************************************************************
0000247A                          2643  *          BUFFER_COMMA                                           *
0000247A                          2644  *******************************************************************
0000247A                          2645  BUFFER_COMMA
0000247A  16FC 002C               2646          MOVE.B  #',',(A3)+
0000247E  4E75                    2647          RTS
00002480                          2648  
00002480                          2649  *******************************************************************
00002480                          2650  *          PRINT_NEWLINE                                          *
00002480                          2651  *******************************************************************
00002480                          2652  PRINT_NEWLINE
00002480  43F9 00002534           2653          LEA     NEWLINE,A1          print new line
00002486  103C 000E               2654          MOVE.B  #14,D0
0000248A  4E4F                    2655          TRAP    #15
0000248C  4E75                    2656          RTS
0000248E                          2657          
0000248E                          2658  *******************************************************************
0000248E                          2659  *                       PRINT_VALID_BUFFER                        *
0000248E                          2660  *******************************************************************
0000248E                          2661  *   PRE:   A2 BUFFER ITERATOR
0000248E                          2662  *          A3 VALID BUFFER
0000248E                          2663  *          
0000248E                          2664  *          D2 ADDRESS TO MINIPULATE
0000248E                          2665  *   POST:  Prints what is in the valid buffer
0000248E                          2666  *------------------------------------------------------------------
0000248E                          2667  PRINT_VALID_BUFFER
0000248E  247C 00800000           2668          MOVEA.L #$00800000,A2           move buffer iterator to the beginning
00002494  4EB9 000024A2           2669          JSR     VALID_BUFFER_LOOP
0000249A                          2670          
0000249A  267C 00800000           2671          MOVEA.L #$00800000,A3           restart valid buffer location
000024A0                          2672          
000024A0  4E75                    2673          RTS
000024A2                          2674  VALID_BUFFER_LOOP
000024A2  B7CA                    2675          CMPA.L  A2,A3                   compare iterator to end of buffer
000024A4  6E00 0004               2676          BGT     OUTPUT_VALID_BUFFER     branch if we're not there yet
000024A8                          2677          
000024A8  4E75                    2678          RTS
000024AA                          2679  OUTPUT_VALID_BUFFER
000024AA  121A                    2680          MOVE.B  (A2)+,D1                print char in buffer and increment
000024AC  103C 0006               2681          MOVE.B  #6,D0                   pointer
000024B0  4E4F                    2682          TRAP    #15
000024B2                          2683          
000024B2  60EE                    2684          BRA     VALID_BUFFER_LOOP
000024B4                          2685          
000024B4                          2686  *******************************************************************
000024B4                          2687  *                       INVALID_DATA                              *
000024B4                          2688  *******************************************************************
000024B4                          2689  *   PRE:   invalid data
000024B4                          2690  *   POST:  print 1000 DATA $WXYZ where WXYZ is the hex number of data
000024B4                          2691  *------------------------------------------------------------------
000024B4                          2692  INVALID_DATA
000024B4  43F9 00002658           2693          LEA     PRINT_INVALID,A1        print 1000 DATA $
000024BA  103C 000E               2694          MOVE.B  #14,D0
000024BE  4E4F                    2695          TRAP    #15
000024C0                          2696          
000024C0  4EB8 12A4               2697          JSR     ISOLATE_FIFTH_DIGIT     convert the instruction to ascii
000024C4  4EB8 12D4               2698          JSR     CONVERT_AND_BUFFER
000024C8                          2699          
000024C8  4EB8 12AE               2700          JSR     ISOLATE_SIXTH_DIGIT
000024CC  4EB8 12D4               2701          JSR     CONVERT_AND_BUFFER
000024D0                          2702          
000024D0  4EB8 12BA               2703          JSR     ISOLATE_SEVENTH_DIGIT
000024D4  4EB8 12D4               2704          JSR     CONVERT_AND_BUFFER
000024D8                          2705          
000024D8  4EB8 12C6               2706          JSR     ISOLATE_EIGHTH_DIGIT
000024DC  4EB8 12D4               2707          JSR     CONVERT_AND_BUFFER
000024E0                          2708          
000024E0  4EB8 248E               2709          JSR     PRINT_VALID_BUFFER      prints the instruction hex
000024E4  4EB8 2480               2710          JSR     PRINT_NEWLINE           prints new line
000024E8                          2711          
000024E8  6000 ECC8               2712          BRA     START_DISASSEMBLER
000024EC                          2713              
000024EC                          2714  *******************************************************************
000024EC                          2715  *                       END_DISASSEMBLER                          *
000024EC                          2716  *******************************************************************
000024EC                          2717  *   PRE:   We have reached the ending address and so disassembled
000024EC                          2718  *          all of the lines of code
000024EC                          2719  *   POST:  Ends simulation
000024EC                          2720  *------------------------------------------------------------------
000024EC                          2721  END_DISASSEMBLER
000024EC  43F9 0000261D           2722          LEA     END_MESSAGE,A1          display final message
000024F2  103C 000E               2723          MOVE.B  #14,D0
000024F6  4E4F                    2724          TRAP    #15
000024F8                          2725          
000024F8  FFFF FFFF               2726          SIMHALT                         end of program 
000024FC                          2727          
000024FC  3200                    2728          MOVE.W  D0,D1
000024FE  3408                    2729          MOVE.W  A0,D2
00002500  3611                    2730          MOVE.W  (A1),D3
00002502  381A                    2731          MOVE.W  (A2)+,D4
00002504  3A23                    2732          MOVE.W  -(A3),D5
00002506  3C3C 1000               2733          MOVE.W  #$1000,D6
0000250A  3E38 1000               2734          MOVE.W  $1000,D7
0000250E  31C0 1000               2735          MOVE.W  D0,$1000
00002512  38BC 1000               2736          MOVE.W  #$1000,(A4)
00002516  31FC 1000 1001          2737          MOVE.W  #$1000,$1001
0000251C                          2738          
0000251C  3041                    2739          MOVEA.W D1,A0
0000251E  3449                    2740          MOVEA.W A1,A2
00002520  3853                    2741          MOVEA.W (A3),A4
00002522  3C5D                    2742          MOVEA.W (A5)+,A6
00002524  3067                    2743          MOVEA.W -(A7),A0
00002526  3278 1000               2744          MOVEA.W $1000,A1
0000252A  3479 10000000           2745          MOVEA.W $10000000,A2
00002530  367C 1000               2746          MOVEA.W #$1000,A3
00002534                          2747  
00002534= 0D 0A 00                2748  NEWLINE         DC.B    CR,LF,0
00002537= 48 65 6C 6C 6F 20 ...   2749  WELCOME         DC.B    'Hello and welcome to the disassembler.',CR,LF,0
00002560= 54 79 70 65 20 69 ...   2750  START_ADDRESS   DC.B    'Type in the starting address: ',CR,LF,0
00002581= 54 79 70 65 20 69 ...   2751  END_ADDRESS     DC.B    'Type in the ending address: ',CR,LF,0  
000025A0= 49 6E 76 61 6C 69 ...   2752  INVALIDA        DC.B    'Invalid information inputed. Starting over.',CR,LF,0
000025CE= 45 6E 74 65 72 20 ...   2753  CONTINUEPROMPT  DC.B    'Enter to continue...',0
000025E3= 2D 2D 2D 2D 2D 2D ...   2754  STARTINGDIS     DC.B    '---------------Starting the disassembler---------------',CR,LF,0
0000261D= 54 68 61 6E 6B 20 ...   2755  END_MESSAGE     DC.B    'Thank you for using our disassembler. Good bye.',CR,LF,0
0000264F= 20 20 20 20 20 20 ...   2756  TAB             DC.B    '        ',0
00002658= 31 30 30 30 20 44 ...   2757  PRINT_INVALID   DC.B    '1000 DATA $',0
00002664                          2758  
00002664                          2759          END    START       

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       2362
ABSOLUTE_WORD       234C
ADD                 1952
ADDA                19D8
ADD_SUB_DIRECTION   1978
ASCII_LETTER        12F2
ASCII_NUMBER        12EC
ASD_MEM             2100
ASD_REG             2180
BCC                 1D54
BCLR_DN_EA          1864
BCLR_DN_EA_B        18C2
BCLR_DN_EA_L        1876
BCLR_IM_EA          190E
BCS                 1D88
BGE                 1DBC
BIT_00_BITMASK      1
BIT_01_BITMASK      2
BIT_02_BITMASK      4
BIT_03_BITMASK      8
BIT_04_BITMASK      10
BIT_04_TO_03        18
BIT_05_BITMASK      20
BIT_05_TO_00        3F
BIT_05_TO_03        38
BIT_06_BITMASK      40
BIT_07_BITMASK      80
BIT_07_TO_00        FF
BIT_07_TO_06        C0
BIT_08_BITMASK      100
BIT_08_TO_06        1C0
BIT_09_BITMASK      200
BIT_10_BITMASK      400
BIT_11_BITMASK      800
BIT_11_TO_06        FC0
BIT_11_TO_08        F00
BIT_11_TO_09        E00
BIT_12_BITMASK      1000
BIT_13_BITMASK      2000
BIT_14_BITMASK      4000
BIT_15_BITMASK      8000
BLT                 1DF0
BRA                 1D20
BUFFER_0            2426
BUFFER_1            242C
BUFFER_2            2432
BUFFER_3            2438
BUFFER_4            243E
BUFFER_5            2444
BUFFER_6            244A
BUFFER_7            2450
BUFFER_ADDRESS      1216
BUFFER_AN           23AC
BUFFER_AN_I         23B4
BUFFER_AN_POST      23C2
BUFFER_AN_PRE       23D4
BUFFER_B            2456
BUFFER_COMMA        247A
BUFFER_D            2474
BUFFER_DN           23A4
BUFFER_HASHTAG      246E
BUFFER_L            2462
BUFFER_R            2468
BUFFER_SIZE         2230
BUFFER_SIZE_WL      2254
BUFFER_W            245C
BVC                 1E24
CHECK_IF_HEX        10CA
CHECK_IF_HEX_LETTER  10DC
CHECK_VALID_ADDRESS  10A8
CLEAR_SCREEN        11FE
CMP                 1A20
CMPI                175E
CMPIB               1798
CMPIL               1820
CMPIW               17DC
CONTINUEPROMPT      25CE
CONVERT_AND_BUFFER  12D4
CONVERT_DEC_TO_ASCII  10FE
CONVERT_NUMBER      11AA
CONVERT_TO_ASCII    12E0
CR                  D
DESTINATION_MOVE    22D4
DESTINATION_NUM     2224
DIRECTION           21EC
DISPLACE_16         2284
DISPLACE_32         22A0
DISPLACE_8          226C
DIVS                1E58
DN_TO_EA            198C
D_MODE_BITMASK      1C0
D_REG_BITMASK       E00
EA_TO_DN            19B2
END_ADDRESS         2581
END_DISASSEMBLER    24EC
END_LOOP_1          10BE
END_MESSAGE         261D
EOR                 1A68
FULL_SCREEN         11DE
GET_ADDRESSES       1006
IMMEDIATE_DATA_LONG  238E
IMMEDIATE_DATA_WORD  2378
IMMEDIATE_OR_REGISTER  2200
INVALIDA            25A0
INVALID_ADDRESS     10EE
INVALID_DATA        24B4
ISOLATE_EIGHTH_DIGIT  12C6
ISOLATE_FIFTH_DIGIT  12A4
ISOLATE_FIRST_DIGIT  1280
ISOLATE_FOURTH_DIGIT  129A
ISOLATE_SECOND_DIGIT  128A
ISOLATE_SEVENTH_DIGIT  12BA
ISOLATE_SIXTH_DIGIT  12AE
ISOLATE_THIRD_DIGIT  1292
JSR                 1CB4
LEA                 1CDE
LF                  A
LOOP_1              10AA
LSD_MEM             210C
LSD_REG             218C
MEMORY_SHIFT_1110   20DA
MODE_TABLE          22F2
MOVEAL              1B34
MOVEAW              1BBC
MOVEB               1AB0
MOVEL               1AF2
MOVEW               1B7A
MULS                201C
NEGB                1C02
NEGL                1C66
NEGW                1C34
NEWLINE             2534
NUMBER_OR_LETTER    119A
OPCODE_0000         1440
OPCODE_0000_TEST    1356
OPCODE_0001         1478
OPCODE_0001_TEST    1368
OPCODE_0010         147E
OPCODE_0010_TEST    137A
OPCODE_0011         1496
OPCODE_0011_TEST    138C
OPCODE_0100         14AE
OPCODE_0100_TEST    139E
OPCODE_0101         1502
OPCODE_0101_TEST    13B0
OPCODE_0110         1526
OPCODE_0110_TEST    13C2
OPCODE_1000         157E
OPCODE_1000_TEST    13D4
OPCODE_1001         15B4
OPCODE_1001_TEST    13E6
OPCODE_1011         15D8
OPCODE_1011_TEST    13F8
OPCODE_1100         160C
OPCODE_1100_TEST    140A
OPCODE_1101         161E
OPCODE_1101_TEST    141C
OPCODE_1110         1642
OPCODE_1110_TEST    142E
OP_0000_BITMASK     0
OP_0001_BITMASK     1000
OP_0010_BITMASK     2000
OP_0011_BITMASK     3000
OP_0100_BITMASK     4000
OP_0101_BITMASK     5000
OP_0110_BITMASK     6000
OP_1000_BITMASK     8000
OP_1001_BITMASK     9000
OP_1011_BITMASK     B000
OP_1100_BITMASK     C000
OP_1101_BITMASK     D000
OP_1110_BITMASK     E000
OP_1110_MEM         2124
OP_1110_REG         21A4
OP_AND_BITMASK      F000
OP_CODE_TABLE       12FE
OR                  1EA8
ORI                 1656
ORIB                169E
ORIL                171E
ORIW                16DE
OR_MEM_TO_REG       1F6E
OR_MEM_TO_REG_B     1F9C
OR_MEM_TO_REG_DN_EA  1FF0
OR_MEM_TO_REG_L     1FD4
OR_MEM_TO_REG_W     1FB8
OR_REG_TO_MEM       1EBA
OR_REG_TO_MEM_B     1EE8
OR_REG_TO_MEM_EA_DN  1F42
OR_REG_TO_MEM_L     1F24
OR_REG_TO_MEM_W     1F06
OTHER_MODE          2326
OUTPUT_VALID_BUFFER  24AA
PRINT_INSTRUCTION   12F8
PRINT_INVALID       2658
PRINT_NEWLINE       2480
PRINT_VALID_BUFFER  248E
REGISTER_NUMBER     23E6
REGISTER_SHIFT_1110  215C
ROD_MEM             2118
ROD_REG             2198
RTS                 1C98
SOURCE_MOVE         22BA
SOURCE_NUM          2214
START               1000
STARTINGDIS         25E3
START_ADDRESS       2560
START_DISASSEMBLER  11B2
SUB                 206C
SUBQ                2092
S_MODE_BITMASK      38
S_REG_BITMASK       7
TAB                 264F
VALID_BUFFER        800000
VALID_BUFFER_LOOP   24A2
WELCOME             2537
